
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Usuario
 * 
 */
export type Usuario = $Result.DefaultSelection<Prisma.$UsuarioPayload>
/**
 * Model Roles
 * 
 */
export type Roles = $Result.DefaultSelection<Prisma.$RolesPayload>
/**
 * Model Catalogos
 * 
 */
export type Catalogos = $Result.DefaultSelection<Prisma.$CatalogosPayload>
/**
 * Model Categorias
 * 
 */
export type Categorias = $Result.DefaultSelection<Prisma.$CategoriasPayload>
/**
 * Model Admin
 * 
 */
export type Admin = $Result.DefaultSelection<Prisma.$AdminPayload>
/**
 * Model Productos
 * 
 */
export type Productos = $Result.DefaultSelection<Prisma.$ProductosPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Usuarios
 * const usuarios = await prisma.usuario.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Usuarios
   * const usuarios = await prisma.usuario.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.usuario`: Exposes CRUD operations for the **Usuario** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Usuarios
    * const usuarios = await prisma.usuario.findMany()
    * ```
    */
  get usuario(): Prisma.UsuarioDelegate<ExtArgs>;

  /**
   * `prisma.roles`: Exposes CRUD operations for the **Roles** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Roles
    * const roles = await prisma.roles.findMany()
    * ```
    */
  get roles(): Prisma.RolesDelegate<ExtArgs>;

  /**
   * `prisma.catalogos`: Exposes CRUD operations for the **Catalogos** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Catalogos
    * const catalogos = await prisma.catalogos.findMany()
    * ```
    */
  get catalogos(): Prisma.CatalogosDelegate<ExtArgs>;

  /**
   * `prisma.categorias`: Exposes CRUD operations for the **Categorias** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Categorias
    * const categorias = await prisma.categorias.findMany()
    * ```
    */
  get categorias(): Prisma.CategoriasDelegate<ExtArgs>;

  /**
   * `prisma.admin`: Exposes CRUD operations for the **Admin** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Admins
    * const admins = await prisma.admin.findMany()
    * ```
    */
  get admin(): Prisma.AdminDelegate<ExtArgs>;

  /**
   * `prisma.productos`: Exposes CRUD operations for the **Productos** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Productos
    * const productos = await prisma.productos.findMany()
    * ```
    */
  get productos(): Prisma.ProductosDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.13.0
   * Query Engine version: efd2449663b3d73d637ea1fd226bafbcf45b3102
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Usuario: 'Usuario',
    Roles: 'Roles',
    Catalogos: 'Catalogos',
    Categorias: 'Categorias',
    Admin: 'Admin',
    Productos: 'Productos'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'usuario' | 'roles' | 'catalogos' | 'categorias' | 'admin' | 'productos'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      Usuario: {
        payload: Prisma.$UsuarioPayload<ExtArgs>
        fields: Prisma.UsuarioFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UsuarioFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UsuarioFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>
          }
          findFirst: {
            args: Prisma.UsuarioFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UsuarioFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>
          }
          findMany: {
            args: Prisma.UsuarioFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>[]
          }
          create: {
            args: Prisma.UsuarioCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>
          }
          createMany: {
            args: Prisma.UsuarioCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.UsuarioDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>
          }
          update: {
            args: Prisma.UsuarioUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>
          }
          deleteMany: {
            args: Prisma.UsuarioDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.UsuarioUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.UsuarioUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>
          }
          aggregate: {
            args: Prisma.UsuarioAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateUsuario>
          }
          groupBy: {
            args: Prisma.UsuarioGroupByArgs<ExtArgs>,
            result: $Utils.Optional<UsuarioGroupByOutputType>[]
          }
          count: {
            args: Prisma.UsuarioCountArgs<ExtArgs>,
            result: $Utils.Optional<UsuarioCountAggregateOutputType> | number
          }
        }
      }
      Roles: {
        payload: Prisma.$RolesPayload<ExtArgs>
        fields: Prisma.RolesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RolesFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RolesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RolesFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RolesPayload>
          }
          findFirst: {
            args: Prisma.RolesFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RolesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RolesFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RolesPayload>
          }
          findMany: {
            args: Prisma.RolesFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RolesPayload>[]
          }
          create: {
            args: Prisma.RolesCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RolesPayload>
          }
          createMany: {
            args: Prisma.RolesCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.RolesDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RolesPayload>
          }
          update: {
            args: Prisma.RolesUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RolesPayload>
          }
          deleteMany: {
            args: Prisma.RolesDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.RolesUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.RolesUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RolesPayload>
          }
          aggregate: {
            args: Prisma.RolesAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateRoles>
          }
          groupBy: {
            args: Prisma.RolesGroupByArgs<ExtArgs>,
            result: $Utils.Optional<RolesGroupByOutputType>[]
          }
          count: {
            args: Prisma.RolesCountArgs<ExtArgs>,
            result: $Utils.Optional<RolesCountAggregateOutputType> | number
          }
        }
      }
      Catalogos: {
        payload: Prisma.$CatalogosPayload<ExtArgs>
        fields: Prisma.CatalogosFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CatalogosFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CatalogosPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CatalogosFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CatalogosPayload>
          }
          findFirst: {
            args: Prisma.CatalogosFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CatalogosPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CatalogosFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CatalogosPayload>
          }
          findMany: {
            args: Prisma.CatalogosFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CatalogosPayload>[]
          }
          create: {
            args: Prisma.CatalogosCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CatalogosPayload>
          }
          createMany: {
            args: Prisma.CatalogosCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.CatalogosDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CatalogosPayload>
          }
          update: {
            args: Prisma.CatalogosUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CatalogosPayload>
          }
          deleteMany: {
            args: Prisma.CatalogosDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.CatalogosUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.CatalogosUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CatalogosPayload>
          }
          aggregate: {
            args: Prisma.CatalogosAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateCatalogos>
          }
          groupBy: {
            args: Prisma.CatalogosGroupByArgs<ExtArgs>,
            result: $Utils.Optional<CatalogosGroupByOutputType>[]
          }
          count: {
            args: Prisma.CatalogosCountArgs<ExtArgs>,
            result: $Utils.Optional<CatalogosCountAggregateOutputType> | number
          }
        }
      }
      Categorias: {
        payload: Prisma.$CategoriasPayload<ExtArgs>
        fields: Prisma.CategoriasFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CategoriasFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CategoriasPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CategoriasFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CategoriasPayload>
          }
          findFirst: {
            args: Prisma.CategoriasFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CategoriasPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CategoriasFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CategoriasPayload>
          }
          findMany: {
            args: Prisma.CategoriasFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CategoriasPayload>[]
          }
          create: {
            args: Prisma.CategoriasCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CategoriasPayload>
          }
          createMany: {
            args: Prisma.CategoriasCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.CategoriasDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CategoriasPayload>
          }
          update: {
            args: Prisma.CategoriasUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CategoriasPayload>
          }
          deleteMany: {
            args: Prisma.CategoriasDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.CategoriasUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.CategoriasUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CategoriasPayload>
          }
          aggregate: {
            args: Prisma.CategoriasAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateCategorias>
          }
          groupBy: {
            args: Prisma.CategoriasGroupByArgs<ExtArgs>,
            result: $Utils.Optional<CategoriasGroupByOutputType>[]
          }
          count: {
            args: Prisma.CategoriasCountArgs<ExtArgs>,
            result: $Utils.Optional<CategoriasCountAggregateOutputType> | number
          }
        }
      }
      Admin: {
        payload: Prisma.$AdminPayload<ExtArgs>
        fields: Prisma.AdminFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AdminFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AdminPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AdminFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>
          }
          findFirst: {
            args: Prisma.AdminFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AdminPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AdminFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>
          }
          findMany: {
            args: Prisma.AdminFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>[]
          }
          create: {
            args: Prisma.AdminCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>
          }
          createMany: {
            args: Prisma.AdminCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.AdminDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>
          }
          update: {
            args: Prisma.AdminUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>
          }
          deleteMany: {
            args: Prisma.AdminDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.AdminUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.AdminUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>
          }
          aggregate: {
            args: Prisma.AdminAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateAdmin>
          }
          groupBy: {
            args: Prisma.AdminGroupByArgs<ExtArgs>,
            result: $Utils.Optional<AdminGroupByOutputType>[]
          }
          count: {
            args: Prisma.AdminCountArgs<ExtArgs>,
            result: $Utils.Optional<AdminCountAggregateOutputType> | number
          }
        }
      }
      Productos: {
        payload: Prisma.$ProductosPayload<ExtArgs>
        fields: Prisma.ProductosFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProductosFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProductosPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProductosFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProductosPayload>
          }
          findFirst: {
            args: Prisma.ProductosFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProductosPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProductosFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProductosPayload>
          }
          findMany: {
            args: Prisma.ProductosFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProductosPayload>[]
          }
          create: {
            args: Prisma.ProductosCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProductosPayload>
          }
          createMany: {
            args: Prisma.ProductosCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ProductosDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProductosPayload>
          }
          update: {
            args: Prisma.ProductosUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProductosPayload>
          }
          deleteMany: {
            args: Prisma.ProductosDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ProductosUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ProductosUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProductosPayload>
          }
          aggregate: {
            args: Prisma.ProductosAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateProductos>
          }
          groupBy: {
            args: Prisma.ProductosGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ProductosGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProductosCountArgs<ExtArgs>,
            result: $Utils.Optional<ProductosCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UsuarioCountOutputType
   */

  export type UsuarioCountOutputType = {
    productos: number
  }

  export type UsuarioCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    productos?: boolean | UsuarioCountOutputTypeCountProductosArgs
  }

  // Custom InputTypes
  /**
   * UsuarioCountOutputType without action
   */
  export type UsuarioCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsuarioCountOutputType
     */
    select?: UsuarioCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UsuarioCountOutputType without action
   */
  export type UsuarioCountOutputTypeCountProductosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProductosWhereInput
  }


  /**
   * Count Type RolesCountOutputType
   */

  export type RolesCountOutputType = {
    usuarios: number
    Admins: number
  }

  export type RolesCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    usuarios?: boolean | RolesCountOutputTypeCountUsuariosArgs
    Admins?: boolean | RolesCountOutputTypeCountAdminsArgs
  }

  // Custom InputTypes
  /**
   * RolesCountOutputType without action
   */
  export type RolesCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RolesCountOutputType
     */
    select?: RolesCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * RolesCountOutputType without action
   */
  export type RolesCountOutputTypeCountUsuariosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UsuarioWhereInput
  }

  /**
   * RolesCountOutputType without action
   */
  export type RolesCountOutputTypeCountAdminsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AdminWhereInput
  }


  /**
   * Count Type CatalogosCountOutputType
   */

  export type CatalogosCountOutputType = {
    categorias: number
  }

  export type CatalogosCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    categorias?: boolean | CatalogosCountOutputTypeCountCategoriasArgs
  }

  // Custom InputTypes
  /**
   * CatalogosCountOutputType without action
   */
  export type CatalogosCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CatalogosCountOutputType
     */
    select?: CatalogosCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CatalogosCountOutputType without action
   */
  export type CatalogosCountOutputTypeCountCategoriasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CategoriasWhereInput
  }


  /**
   * Count Type CategoriasCountOutputType
   */

  export type CategoriasCountOutputType = {
    productos: number
  }

  export type CategoriasCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    productos?: boolean | CategoriasCountOutputTypeCountProductosArgs
  }

  // Custom InputTypes
  /**
   * CategoriasCountOutputType without action
   */
  export type CategoriasCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CategoriasCountOutputType
     */
    select?: CategoriasCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CategoriasCountOutputType without action
   */
  export type CategoriasCountOutputTypeCountProductosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProductosWhereInput
  }


  /**
   * Count Type AdminCountOutputType
   */

  export type AdminCountOutputType = {
    catalogos: number
    categorias: number
  }

  export type AdminCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    catalogos?: boolean | AdminCountOutputTypeCountCatalogosArgs
    categorias?: boolean | AdminCountOutputTypeCountCategoriasArgs
  }

  // Custom InputTypes
  /**
   * AdminCountOutputType without action
   */
  export type AdminCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminCountOutputType
     */
    select?: AdminCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * AdminCountOutputType without action
   */
  export type AdminCountOutputTypeCountCatalogosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CatalogosWhereInput
  }

  /**
   * AdminCountOutputType without action
   */
  export type AdminCountOutputTypeCountCategoriasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CategoriasWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Usuario
   */

  export type AggregateUsuario = {
    _count: UsuarioCountAggregateOutputType | null
    _avg: UsuarioAvgAggregateOutputType | null
    _sum: UsuarioSumAggregateOutputType | null
    _min: UsuarioMinAggregateOutputType | null
    _max: UsuarioMaxAggregateOutputType | null
  }

  export type UsuarioAvgAggregateOutputType = {
    id: number | null
    id_Rol: number | null
  }

  export type UsuarioSumAggregateOutputType = {
    id: number | null
    id_Rol: number | null
  }

  export type UsuarioMinAggregateOutputType = {
    id: number | null
    Nombres: string | null
    Apellidos: string | null
    UserName: string | null
    Password: string | null
    Email: string | null
    Celular: string | null
    Imagen: string | null
    DateCreated: Date | null
    id_Rol: number | null
  }

  export type UsuarioMaxAggregateOutputType = {
    id: number | null
    Nombres: string | null
    Apellidos: string | null
    UserName: string | null
    Password: string | null
    Email: string | null
    Celular: string | null
    Imagen: string | null
    DateCreated: Date | null
    id_Rol: number | null
  }

  export type UsuarioCountAggregateOutputType = {
    id: number
    Nombres: number
    Apellidos: number
    UserName: number
    Password: number
    Email: number
    Celular: number
    Imagen: number
    DateCreated: number
    id_Rol: number
    _all: number
  }


  export type UsuarioAvgAggregateInputType = {
    id?: true
    id_Rol?: true
  }

  export type UsuarioSumAggregateInputType = {
    id?: true
    id_Rol?: true
  }

  export type UsuarioMinAggregateInputType = {
    id?: true
    Nombres?: true
    Apellidos?: true
    UserName?: true
    Password?: true
    Email?: true
    Celular?: true
    Imagen?: true
    DateCreated?: true
    id_Rol?: true
  }

  export type UsuarioMaxAggregateInputType = {
    id?: true
    Nombres?: true
    Apellidos?: true
    UserName?: true
    Password?: true
    Email?: true
    Celular?: true
    Imagen?: true
    DateCreated?: true
    id_Rol?: true
  }

  export type UsuarioCountAggregateInputType = {
    id?: true
    Nombres?: true
    Apellidos?: true
    UserName?: true
    Password?: true
    Email?: true
    Celular?: true
    Imagen?: true
    DateCreated?: true
    id_Rol?: true
    _all?: true
  }

  export type UsuarioAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Usuario to aggregate.
     */
    where?: UsuarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Usuarios to fetch.
     */
    orderBy?: UsuarioOrderByWithRelationInput | UsuarioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UsuarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Usuarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Usuarios
    **/
    _count?: true | UsuarioCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UsuarioAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UsuarioSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UsuarioMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UsuarioMaxAggregateInputType
  }

  export type GetUsuarioAggregateType<T extends UsuarioAggregateArgs> = {
        [P in keyof T & keyof AggregateUsuario]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUsuario[P]>
      : GetScalarType<T[P], AggregateUsuario[P]>
  }




  export type UsuarioGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UsuarioWhereInput
    orderBy?: UsuarioOrderByWithAggregationInput | UsuarioOrderByWithAggregationInput[]
    by: UsuarioScalarFieldEnum[] | UsuarioScalarFieldEnum
    having?: UsuarioScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UsuarioCountAggregateInputType | true
    _avg?: UsuarioAvgAggregateInputType
    _sum?: UsuarioSumAggregateInputType
    _min?: UsuarioMinAggregateInputType
    _max?: UsuarioMaxAggregateInputType
  }

  export type UsuarioGroupByOutputType = {
    id: number
    Nombres: string
    Apellidos: string
    UserName: string
    Password: string
    Email: string
    Celular: string
    Imagen: string
    DateCreated: Date
    id_Rol: number
    _count: UsuarioCountAggregateOutputType | null
    _avg: UsuarioAvgAggregateOutputType | null
    _sum: UsuarioSumAggregateOutputType | null
    _min: UsuarioMinAggregateOutputType | null
    _max: UsuarioMaxAggregateOutputType | null
  }

  type GetUsuarioGroupByPayload<T extends UsuarioGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UsuarioGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UsuarioGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UsuarioGroupByOutputType[P]>
            : GetScalarType<T[P], UsuarioGroupByOutputType[P]>
        }
      >
    >


  export type UsuarioSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    Nombres?: boolean
    Apellidos?: boolean
    UserName?: boolean
    Password?: boolean
    Email?: boolean
    Celular?: boolean
    Imagen?: boolean
    DateCreated?: boolean
    id_Rol?: boolean
    roles?: boolean | RolesDefaultArgs<ExtArgs>
    productos?: boolean | Usuario$productosArgs<ExtArgs>
    _count?: boolean | UsuarioCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["usuario"]>

  export type UsuarioSelectScalar = {
    id?: boolean
    Nombres?: boolean
    Apellidos?: boolean
    UserName?: boolean
    Password?: boolean
    Email?: boolean
    Celular?: boolean
    Imagen?: boolean
    DateCreated?: boolean
    id_Rol?: boolean
  }


  export type UsuarioInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    roles?: boolean | RolesDefaultArgs<ExtArgs>
    productos?: boolean | Usuario$productosArgs<ExtArgs>
    _count?: boolean | UsuarioCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $UsuarioPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Usuario"
    objects: {
      roles: Prisma.$RolesPayload<ExtArgs>
      productos: Prisma.$ProductosPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      Nombres: string
      Apellidos: string
      UserName: string
      Password: string
      Email: string
      Celular: string
      Imagen: string
      DateCreated: Date
      id_Rol: number
    }, ExtArgs["result"]["usuario"]>
    composites: {}
  }


  type UsuarioGetPayload<S extends boolean | null | undefined | UsuarioDefaultArgs> = $Result.GetResult<Prisma.$UsuarioPayload, S>

  type UsuarioCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UsuarioFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UsuarioCountAggregateInputType | true
    }

  export interface UsuarioDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Usuario'], meta: { name: 'Usuario' } }
    /**
     * Find zero or one Usuario that matches the filter.
     * @param {UsuarioFindUniqueArgs} args - Arguments to find a Usuario
     * @example
     * // Get one Usuario
     * const usuario = await prisma.usuario.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UsuarioFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, UsuarioFindUniqueArgs<ExtArgs>>
    ): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Usuario that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {UsuarioFindUniqueOrThrowArgs} args - Arguments to find a Usuario
     * @example
     * // Get one Usuario
     * const usuario = await prisma.usuario.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UsuarioFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UsuarioFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Usuario that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioFindFirstArgs} args - Arguments to find a Usuario
     * @example
     * // Get one Usuario
     * const usuario = await prisma.usuario.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UsuarioFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, UsuarioFindFirstArgs<ExtArgs>>
    ): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Usuario that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioFindFirstOrThrowArgs} args - Arguments to find a Usuario
     * @example
     * // Get one Usuario
     * const usuario = await prisma.usuario.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UsuarioFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UsuarioFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Usuarios that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Usuarios
     * const usuarios = await prisma.usuario.findMany()
     * 
     * // Get first 10 Usuarios
     * const usuarios = await prisma.usuario.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const usuarioWithIdOnly = await prisma.usuario.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UsuarioFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UsuarioFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Usuario.
     * @param {UsuarioCreateArgs} args - Arguments to create a Usuario.
     * @example
     * // Create one Usuario
     * const Usuario = await prisma.usuario.create({
     *   data: {
     *     // ... data to create a Usuario
     *   }
     * })
     * 
    **/
    create<T extends UsuarioCreateArgs<ExtArgs>>(
      args: SelectSubset<T, UsuarioCreateArgs<ExtArgs>>
    ): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Usuarios.
     *     @param {UsuarioCreateManyArgs} args - Arguments to create many Usuarios.
     *     @example
     *     // Create many Usuarios
     *     const usuario = await prisma.usuario.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UsuarioCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UsuarioCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Usuario.
     * @param {UsuarioDeleteArgs} args - Arguments to delete one Usuario.
     * @example
     * // Delete one Usuario
     * const Usuario = await prisma.usuario.delete({
     *   where: {
     *     // ... filter to delete one Usuario
     *   }
     * })
     * 
    **/
    delete<T extends UsuarioDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, UsuarioDeleteArgs<ExtArgs>>
    ): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Usuario.
     * @param {UsuarioUpdateArgs} args - Arguments to update one Usuario.
     * @example
     * // Update one Usuario
     * const usuario = await prisma.usuario.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UsuarioUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, UsuarioUpdateArgs<ExtArgs>>
    ): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Usuarios.
     * @param {UsuarioDeleteManyArgs} args - Arguments to filter Usuarios to delete.
     * @example
     * // Delete a few Usuarios
     * const { count } = await prisma.usuario.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UsuarioDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UsuarioDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Usuarios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Usuarios
     * const usuario = await prisma.usuario.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UsuarioUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, UsuarioUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Usuario.
     * @param {UsuarioUpsertArgs} args - Arguments to update or create a Usuario.
     * @example
     * // Update or create a Usuario
     * const usuario = await prisma.usuario.upsert({
     *   create: {
     *     // ... data to create a Usuario
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Usuario we want to update
     *   }
     * })
    **/
    upsert<T extends UsuarioUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, UsuarioUpsertArgs<ExtArgs>>
    ): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Usuarios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioCountArgs} args - Arguments to filter Usuarios to count.
     * @example
     * // Count the number of Usuarios
     * const count = await prisma.usuario.count({
     *   where: {
     *     // ... the filter for the Usuarios we want to count
     *   }
     * })
    **/
    count<T extends UsuarioCountArgs>(
      args?: Subset<T, UsuarioCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UsuarioCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Usuario.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UsuarioAggregateArgs>(args: Subset<T, UsuarioAggregateArgs>): Prisma.PrismaPromise<GetUsuarioAggregateType<T>>

    /**
     * Group by Usuario.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UsuarioGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UsuarioGroupByArgs['orderBy'] }
        : { orderBy?: UsuarioGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UsuarioGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUsuarioGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Usuario model
   */
  readonly fields: UsuarioFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Usuario.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UsuarioClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    roles<T extends RolesDefaultArgs<ExtArgs> = {}>(args?: Subset<T, RolesDefaultArgs<ExtArgs>>): Prisma__RolesClient<$Result.GetResult<Prisma.$RolesPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    productos<T extends Usuario$productosArgs<ExtArgs> = {}>(args?: Subset<T, Usuario$productosArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductosPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Usuario model
   */ 
  interface UsuarioFieldRefs {
    readonly id: FieldRef<"Usuario", 'Int'>
    readonly Nombres: FieldRef<"Usuario", 'String'>
    readonly Apellidos: FieldRef<"Usuario", 'String'>
    readonly UserName: FieldRef<"Usuario", 'String'>
    readonly Password: FieldRef<"Usuario", 'String'>
    readonly Email: FieldRef<"Usuario", 'String'>
    readonly Celular: FieldRef<"Usuario", 'String'>
    readonly Imagen: FieldRef<"Usuario", 'String'>
    readonly DateCreated: FieldRef<"Usuario", 'DateTime'>
    readonly id_Rol: FieldRef<"Usuario", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Usuario findUnique
   */
  export type UsuarioFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * Filter, which Usuario to fetch.
     */
    where: UsuarioWhereUniqueInput
  }

  /**
   * Usuario findUniqueOrThrow
   */
  export type UsuarioFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * Filter, which Usuario to fetch.
     */
    where: UsuarioWhereUniqueInput
  }

  /**
   * Usuario findFirst
   */
  export type UsuarioFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * Filter, which Usuario to fetch.
     */
    where?: UsuarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Usuarios to fetch.
     */
    orderBy?: UsuarioOrderByWithRelationInput | UsuarioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Usuarios.
     */
    cursor?: UsuarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Usuarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Usuarios.
     */
    distinct?: UsuarioScalarFieldEnum | UsuarioScalarFieldEnum[]
  }

  /**
   * Usuario findFirstOrThrow
   */
  export type UsuarioFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * Filter, which Usuario to fetch.
     */
    where?: UsuarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Usuarios to fetch.
     */
    orderBy?: UsuarioOrderByWithRelationInput | UsuarioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Usuarios.
     */
    cursor?: UsuarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Usuarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Usuarios.
     */
    distinct?: UsuarioScalarFieldEnum | UsuarioScalarFieldEnum[]
  }

  /**
   * Usuario findMany
   */
  export type UsuarioFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * Filter, which Usuarios to fetch.
     */
    where?: UsuarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Usuarios to fetch.
     */
    orderBy?: UsuarioOrderByWithRelationInput | UsuarioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Usuarios.
     */
    cursor?: UsuarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Usuarios.
     */
    skip?: number
    distinct?: UsuarioScalarFieldEnum | UsuarioScalarFieldEnum[]
  }

  /**
   * Usuario create
   */
  export type UsuarioCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * The data needed to create a Usuario.
     */
    data: XOR<UsuarioCreateInput, UsuarioUncheckedCreateInput>
  }

  /**
   * Usuario createMany
   */
  export type UsuarioCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Usuarios.
     */
    data: UsuarioCreateManyInput | UsuarioCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Usuario update
   */
  export type UsuarioUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * The data needed to update a Usuario.
     */
    data: XOR<UsuarioUpdateInput, UsuarioUncheckedUpdateInput>
    /**
     * Choose, which Usuario to update.
     */
    where: UsuarioWhereUniqueInput
  }

  /**
   * Usuario updateMany
   */
  export type UsuarioUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Usuarios.
     */
    data: XOR<UsuarioUpdateManyMutationInput, UsuarioUncheckedUpdateManyInput>
    /**
     * Filter which Usuarios to update
     */
    where?: UsuarioWhereInput
  }

  /**
   * Usuario upsert
   */
  export type UsuarioUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * The filter to search for the Usuario to update in case it exists.
     */
    where: UsuarioWhereUniqueInput
    /**
     * In case the Usuario found by the `where` argument doesn't exist, create a new Usuario with this data.
     */
    create: XOR<UsuarioCreateInput, UsuarioUncheckedCreateInput>
    /**
     * In case the Usuario was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UsuarioUpdateInput, UsuarioUncheckedUpdateInput>
  }

  /**
   * Usuario delete
   */
  export type UsuarioDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * Filter which Usuario to delete.
     */
    where: UsuarioWhereUniqueInput
  }

  /**
   * Usuario deleteMany
   */
  export type UsuarioDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Usuarios to delete
     */
    where?: UsuarioWhereInput
  }

  /**
   * Usuario.productos
   */
  export type Usuario$productosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Productos
     */
    select?: ProductosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductosInclude<ExtArgs> | null
    where?: ProductosWhereInput
    orderBy?: ProductosOrderByWithRelationInput | ProductosOrderByWithRelationInput[]
    cursor?: ProductosWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProductosScalarFieldEnum | ProductosScalarFieldEnum[]
  }

  /**
   * Usuario without action
   */
  export type UsuarioDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
  }


  /**
   * Model Roles
   */

  export type AggregateRoles = {
    _count: RolesCountAggregateOutputType | null
    _avg: RolesAvgAggregateOutputType | null
    _sum: RolesSumAggregateOutputType | null
    _min: RolesMinAggregateOutputType | null
    _max: RolesMaxAggregateOutputType | null
  }

  export type RolesAvgAggregateOutputType = {
    id: number | null
  }

  export type RolesSumAggregateOutputType = {
    id: number | null
  }

  export type RolesMinAggregateOutputType = {
    id: number | null
    Nombre: string | null
  }

  export type RolesMaxAggregateOutputType = {
    id: number | null
    Nombre: string | null
  }

  export type RolesCountAggregateOutputType = {
    id: number
    Nombre: number
    _all: number
  }


  export type RolesAvgAggregateInputType = {
    id?: true
  }

  export type RolesSumAggregateInputType = {
    id?: true
  }

  export type RolesMinAggregateInputType = {
    id?: true
    Nombre?: true
  }

  export type RolesMaxAggregateInputType = {
    id?: true
    Nombre?: true
  }

  export type RolesCountAggregateInputType = {
    id?: true
    Nombre?: true
    _all?: true
  }

  export type RolesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Roles to aggregate.
     */
    where?: RolesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Roles to fetch.
     */
    orderBy?: RolesOrderByWithRelationInput | RolesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RolesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Roles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Roles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Roles
    **/
    _count?: true | RolesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RolesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RolesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RolesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RolesMaxAggregateInputType
  }

  export type GetRolesAggregateType<T extends RolesAggregateArgs> = {
        [P in keyof T & keyof AggregateRoles]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRoles[P]>
      : GetScalarType<T[P], AggregateRoles[P]>
  }




  export type RolesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RolesWhereInput
    orderBy?: RolesOrderByWithAggregationInput | RolesOrderByWithAggregationInput[]
    by: RolesScalarFieldEnum[] | RolesScalarFieldEnum
    having?: RolesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RolesCountAggregateInputType | true
    _avg?: RolesAvgAggregateInputType
    _sum?: RolesSumAggregateInputType
    _min?: RolesMinAggregateInputType
    _max?: RolesMaxAggregateInputType
  }

  export type RolesGroupByOutputType = {
    id: number
    Nombre: string
    _count: RolesCountAggregateOutputType | null
    _avg: RolesAvgAggregateOutputType | null
    _sum: RolesSumAggregateOutputType | null
    _min: RolesMinAggregateOutputType | null
    _max: RolesMaxAggregateOutputType | null
  }

  type GetRolesGroupByPayload<T extends RolesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RolesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RolesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RolesGroupByOutputType[P]>
            : GetScalarType<T[P], RolesGroupByOutputType[P]>
        }
      >
    >


  export type RolesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    Nombre?: boolean
    usuarios?: boolean | Roles$usuariosArgs<ExtArgs>
    Admins?: boolean | Roles$AdminsArgs<ExtArgs>
    _count?: boolean | RolesCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["roles"]>

  export type RolesSelectScalar = {
    id?: boolean
    Nombre?: boolean
  }


  export type RolesInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    usuarios?: boolean | Roles$usuariosArgs<ExtArgs>
    Admins?: boolean | Roles$AdminsArgs<ExtArgs>
    _count?: boolean | RolesCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $RolesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Roles"
    objects: {
      usuarios: Prisma.$UsuarioPayload<ExtArgs>[]
      Admins: Prisma.$AdminPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      Nombre: string
    }, ExtArgs["result"]["roles"]>
    composites: {}
  }


  type RolesGetPayload<S extends boolean | null | undefined | RolesDefaultArgs> = $Result.GetResult<Prisma.$RolesPayload, S>

  type RolesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<RolesFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: RolesCountAggregateInputType | true
    }

  export interface RolesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Roles'], meta: { name: 'Roles' } }
    /**
     * Find zero or one Roles that matches the filter.
     * @param {RolesFindUniqueArgs} args - Arguments to find a Roles
     * @example
     * // Get one Roles
     * const roles = await prisma.roles.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends RolesFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, RolesFindUniqueArgs<ExtArgs>>
    ): Prisma__RolesClient<$Result.GetResult<Prisma.$RolesPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Roles that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {RolesFindUniqueOrThrowArgs} args - Arguments to find a Roles
     * @example
     * // Get one Roles
     * const roles = await prisma.roles.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends RolesFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, RolesFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__RolesClient<$Result.GetResult<Prisma.$RolesPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Roles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RolesFindFirstArgs} args - Arguments to find a Roles
     * @example
     * // Get one Roles
     * const roles = await prisma.roles.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends RolesFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, RolesFindFirstArgs<ExtArgs>>
    ): Prisma__RolesClient<$Result.GetResult<Prisma.$RolesPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Roles that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RolesFindFirstOrThrowArgs} args - Arguments to find a Roles
     * @example
     * // Get one Roles
     * const roles = await prisma.roles.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends RolesFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, RolesFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__RolesClient<$Result.GetResult<Prisma.$RolesPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Roles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RolesFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Roles
     * const roles = await prisma.roles.findMany()
     * 
     * // Get first 10 Roles
     * const roles = await prisma.roles.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const rolesWithIdOnly = await prisma.roles.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends RolesFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, RolesFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RolesPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Roles.
     * @param {RolesCreateArgs} args - Arguments to create a Roles.
     * @example
     * // Create one Roles
     * const Roles = await prisma.roles.create({
     *   data: {
     *     // ... data to create a Roles
     *   }
     * })
     * 
    **/
    create<T extends RolesCreateArgs<ExtArgs>>(
      args: SelectSubset<T, RolesCreateArgs<ExtArgs>>
    ): Prisma__RolesClient<$Result.GetResult<Prisma.$RolesPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Roles.
     *     @param {RolesCreateManyArgs} args - Arguments to create many Roles.
     *     @example
     *     // Create many Roles
     *     const roles = await prisma.roles.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends RolesCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, RolesCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Roles.
     * @param {RolesDeleteArgs} args - Arguments to delete one Roles.
     * @example
     * // Delete one Roles
     * const Roles = await prisma.roles.delete({
     *   where: {
     *     // ... filter to delete one Roles
     *   }
     * })
     * 
    **/
    delete<T extends RolesDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, RolesDeleteArgs<ExtArgs>>
    ): Prisma__RolesClient<$Result.GetResult<Prisma.$RolesPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Roles.
     * @param {RolesUpdateArgs} args - Arguments to update one Roles.
     * @example
     * // Update one Roles
     * const roles = await prisma.roles.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends RolesUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, RolesUpdateArgs<ExtArgs>>
    ): Prisma__RolesClient<$Result.GetResult<Prisma.$RolesPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Roles.
     * @param {RolesDeleteManyArgs} args - Arguments to filter Roles to delete.
     * @example
     * // Delete a few Roles
     * const { count } = await prisma.roles.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends RolesDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, RolesDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Roles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RolesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Roles
     * const roles = await prisma.roles.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends RolesUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, RolesUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Roles.
     * @param {RolesUpsertArgs} args - Arguments to update or create a Roles.
     * @example
     * // Update or create a Roles
     * const roles = await prisma.roles.upsert({
     *   create: {
     *     // ... data to create a Roles
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Roles we want to update
     *   }
     * })
    **/
    upsert<T extends RolesUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, RolesUpsertArgs<ExtArgs>>
    ): Prisma__RolesClient<$Result.GetResult<Prisma.$RolesPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Roles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RolesCountArgs} args - Arguments to filter Roles to count.
     * @example
     * // Count the number of Roles
     * const count = await prisma.roles.count({
     *   where: {
     *     // ... the filter for the Roles we want to count
     *   }
     * })
    **/
    count<T extends RolesCountArgs>(
      args?: Subset<T, RolesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RolesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Roles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RolesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RolesAggregateArgs>(args: Subset<T, RolesAggregateArgs>): Prisma.PrismaPromise<GetRolesAggregateType<T>>

    /**
     * Group by Roles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RolesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RolesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RolesGroupByArgs['orderBy'] }
        : { orderBy?: RolesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RolesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRolesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Roles model
   */
  readonly fields: RolesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Roles.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RolesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    usuarios<T extends Roles$usuariosArgs<ExtArgs> = {}>(args?: Subset<T, Roles$usuariosArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, 'findMany'> | Null>;

    Admins<T extends Roles$AdminsArgs<ExtArgs> = {}>(args?: Subset<T, Roles$AdminsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Roles model
   */ 
  interface RolesFieldRefs {
    readonly id: FieldRef<"Roles", 'Int'>
    readonly Nombre: FieldRef<"Roles", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Roles findUnique
   */
  export type RolesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Roles
     */
    select?: RolesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RolesInclude<ExtArgs> | null
    /**
     * Filter, which Roles to fetch.
     */
    where: RolesWhereUniqueInput
  }

  /**
   * Roles findUniqueOrThrow
   */
  export type RolesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Roles
     */
    select?: RolesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RolesInclude<ExtArgs> | null
    /**
     * Filter, which Roles to fetch.
     */
    where: RolesWhereUniqueInput
  }

  /**
   * Roles findFirst
   */
  export type RolesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Roles
     */
    select?: RolesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RolesInclude<ExtArgs> | null
    /**
     * Filter, which Roles to fetch.
     */
    where?: RolesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Roles to fetch.
     */
    orderBy?: RolesOrderByWithRelationInput | RolesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Roles.
     */
    cursor?: RolesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Roles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Roles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Roles.
     */
    distinct?: RolesScalarFieldEnum | RolesScalarFieldEnum[]
  }

  /**
   * Roles findFirstOrThrow
   */
  export type RolesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Roles
     */
    select?: RolesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RolesInclude<ExtArgs> | null
    /**
     * Filter, which Roles to fetch.
     */
    where?: RolesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Roles to fetch.
     */
    orderBy?: RolesOrderByWithRelationInput | RolesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Roles.
     */
    cursor?: RolesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Roles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Roles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Roles.
     */
    distinct?: RolesScalarFieldEnum | RolesScalarFieldEnum[]
  }

  /**
   * Roles findMany
   */
  export type RolesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Roles
     */
    select?: RolesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RolesInclude<ExtArgs> | null
    /**
     * Filter, which Roles to fetch.
     */
    where?: RolesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Roles to fetch.
     */
    orderBy?: RolesOrderByWithRelationInput | RolesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Roles.
     */
    cursor?: RolesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Roles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Roles.
     */
    skip?: number
    distinct?: RolesScalarFieldEnum | RolesScalarFieldEnum[]
  }

  /**
   * Roles create
   */
  export type RolesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Roles
     */
    select?: RolesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RolesInclude<ExtArgs> | null
    /**
     * The data needed to create a Roles.
     */
    data: XOR<RolesCreateInput, RolesUncheckedCreateInput>
  }

  /**
   * Roles createMany
   */
  export type RolesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Roles.
     */
    data: RolesCreateManyInput | RolesCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Roles update
   */
  export type RolesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Roles
     */
    select?: RolesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RolesInclude<ExtArgs> | null
    /**
     * The data needed to update a Roles.
     */
    data: XOR<RolesUpdateInput, RolesUncheckedUpdateInput>
    /**
     * Choose, which Roles to update.
     */
    where: RolesWhereUniqueInput
  }

  /**
   * Roles updateMany
   */
  export type RolesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Roles.
     */
    data: XOR<RolesUpdateManyMutationInput, RolesUncheckedUpdateManyInput>
    /**
     * Filter which Roles to update
     */
    where?: RolesWhereInput
  }

  /**
   * Roles upsert
   */
  export type RolesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Roles
     */
    select?: RolesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RolesInclude<ExtArgs> | null
    /**
     * The filter to search for the Roles to update in case it exists.
     */
    where: RolesWhereUniqueInput
    /**
     * In case the Roles found by the `where` argument doesn't exist, create a new Roles with this data.
     */
    create: XOR<RolesCreateInput, RolesUncheckedCreateInput>
    /**
     * In case the Roles was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RolesUpdateInput, RolesUncheckedUpdateInput>
  }

  /**
   * Roles delete
   */
  export type RolesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Roles
     */
    select?: RolesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RolesInclude<ExtArgs> | null
    /**
     * Filter which Roles to delete.
     */
    where: RolesWhereUniqueInput
  }

  /**
   * Roles deleteMany
   */
  export type RolesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Roles to delete
     */
    where?: RolesWhereInput
  }

  /**
   * Roles.usuarios
   */
  export type Roles$usuariosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    where?: UsuarioWhereInput
    orderBy?: UsuarioOrderByWithRelationInput | UsuarioOrderByWithRelationInput[]
    cursor?: UsuarioWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UsuarioScalarFieldEnum | UsuarioScalarFieldEnum[]
  }

  /**
   * Roles.Admins
   */
  export type Roles$AdminsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminInclude<ExtArgs> | null
    where?: AdminWhereInput
    orderBy?: AdminOrderByWithRelationInput | AdminOrderByWithRelationInput[]
    cursor?: AdminWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AdminScalarFieldEnum | AdminScalarFieldEnum[]
  }

  /**
   * Roles without action
   */
  export type RolesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Roles
     */
    select?: RolesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RolesInclude<ExtArgs> | null
  }


  /**
   * Model Catalogos
   */

  export type AggregateCatalogos = {
    _count: CatalogosCountAggregateOutputType | null
    _avg: CatalogosAvgAggregateOutputType | null
    _sum: CatalogosSumAggregateOutputType | null
    _min: CatalogosMinAggregateOutputType | null
    _max: CatalogosMaxAggregateOutputType | null
  }

  export type CatalogosAvgAggregateOutputType = {
    id: number | null
    id_Admin: number | null
  }

  export type CatalogosSumAggregateOutputType = {
    id: number | null
    id_Admin: number | null
  }

  export type CatalogosMinAggregateOutputType = {
    id: number | null
    Nombre: string | null
    Descripcion: string | null
    id_Admin: number | null
  }

  export type CatalogosMaxAggregateOutputType = {
    id: number | null
    Nombre: string | null
    Descripcion: string | null
    id_Admin: number | null
  }

  export type CatalogosCountAggregateOutputType = {
    id: number
    Nombre: number
    Descripcion: number
    id_Admin: number
    _all: number
  }


  export type CatalogosAvgAggregateInputType = {
    id?: true
    id_Admin?: true
  }

  export type CatalogosSumAggregateInputType = {
    id?: true
    id_Admin?: true
  }

  export type CatalogosMinAggregateInputType = {
    id?: true
    Nombre?: true
    Descripcion?: true
    id_Admin?: true
  }

  export type CatalogosMaxAggregateInputType = {
    id?: true
    Nombre?: true
    Descripcion?: true
    id_Admin?: true
  }

  export type CatalogosCountAggregateInputType = {
    id?: true
    Nombre?: true
    Descripcion?: true
    id_Admin?: true
    _all?: true
  }

  export type CatalogosAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Catalogos to aggregate.
     */
    where?: CatalogosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Catalogos to fetch.
     */
    orderBy?: CatalogosOrderByWithRelationInput | CatalogosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CatalogosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Catalogos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Catalogos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Catalogos
    **/
    _count?: true | CatalogosCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CatalogosAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CatalogosSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CatalogosMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CatalogosMaxAggregateInputType
  }

  export type GetCatalogosAggregateType<T extends CatalogosAggregateArgs> = {
        [P in keyof T & keyof AggregateCatalogos]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCatalogos[P]>
      : GetScalarType<T[P], AggregateCatalogos[P]>
  }




  export type CatalogosGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CatalogosWhereInput
    orderBy?: CatalogosOrderByWithAggregationInput | CatalogosOrderByWithAggregationInput[]
    by: CatalogosScalarFieldEnum[] | CatalogosScalarFieldEnum
    having?: CatalogosScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CatalogosCountAggregateInputType | true
    _avg?: CatalogosAvgAggregateInputType
    _sum?: CatalogosSumAggregateInputType
    _min?: CatalogosMinAggregateInputType
    _max?: CatalogosMaxAggregateInputType
  }

  export type CatalogosGroupByOutputType = {
    id: number
    Nombre: string
    Descripcion: string | null
    id_Admin: number
    _count: CatalogosCountAggregateOutputType | null
    _avg: CatalogosAvgAggregateOutputType | null
    _sum: CatalogosSumAggregateOutputType | null
    _min: CatalogosMinAggregateOutputType | null
    _max: CatalogosMaxAggregateOutputType | null
  }

  type GetCatalogosGroupByPayload<T extends CatalogosGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CatalogosGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CatalogosGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CatalogosGroupByOutputType[P]>
            : GetScalarType<T[P], CatalogosGroupByOutputType[P]>
        }
      >
    >


  export type CatalogosSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    Nombre?: boolean
    Descripcion?: boolean
    id_Admin?: boolean
    categorias?: boolean | Catalogos$categoriasArgs<ExtArgs>
    Admins?: boolean | AdminDefaultArgs<ExtArgs>
    _count?: boolean | CatalogosCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["catalogos"]>

  export type CatalogosSelectScalar = {
    id?: boolean
    Nombre?: boolean
    Descripcion?: boolean
    id_Admin?: boolean
  }


  export type CatalogosInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    categorias?: boolean | Catalogos$categoriasArgs<ExtArgs>
    Admins?: boolean | AdminDefaultArgs<ExtArgs>
    _count?: boolean | CatalogosCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $CatalogosPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Catalogos"
    objects: {
      categorias: Prisma.$CategoriasPayload<ExtArgs>[]
      Admins: Prisma.$AdminPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      Nombre: string
      Descripcion: string | null
      id_Admin: number
    }, ExtArgs["result"]["catalogos"]>
    composites: {}
  }


  type CatalogosGetPayload<S extends boolean | null | undefined | CatalogosDefaultArgs> = $Result.GetResult<Prisma.$CatalogosPayload, S>

  type CatalogosCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CatalogosFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CatalogosCountAggregateInputType | true
    }

  export interface CatalogosDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Catalogos'], meta: { name: 'Catalogos' } }
    /**
     * Find zero or one Catalogos that matches the filter.
     * @param {CatalogosFindUniqueArgs} args - Arguments to find a Catalogos
     * @example
     * // Get one Catalogos
     * const catalogos = await prisma.catalogos.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CatalogosFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, CatalogosFindUniqueArgs<ExtArgs>>
    ): Prisma__CatalogosClient<$Result.GetResult<Prisma.$CatalogosPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Catalogos that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {CatalogosFindUniqueOrThrowArgs} args - Arguments to find a Catalogos
     * @example
     * // Get one Catalogos
     * const catalogos = await prisma.catalogos.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends CatalogosFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CatalogosFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__CatalogosClient<$Result.GetResult<Prisma.$CatalogosPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Catalogos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CatalogosFindFirstArgs} args - Arguments to find a Catalogos
     * @example
     * // Get one Catalogos
     * const catalogos = await prisma.catalogos.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CatalogosFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, CatalogosFindFirstArgs<ExtArgs>>
    ): Prisma__CatalogosClient<$Result.GetResult<Prisma.$CatalogosPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Catalogos that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CatalogosFindFirstOrThrowArgs} args - Arguments to find a Catalogos
     * @example
     * // Get one Catalogos
     * const catalogos = await prisma.catalogos.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends CatalogosFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CatalogosFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__CatalogosClient<$Result.GetResult<Prisma.$CatalogosPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Catalogos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CatalogosFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Catalogos
     * const catalogos = await prisma.catalogos.findMany()
     * 
     * // Get first 10 Catalogos
     * const catalogos = await prisma.catalogos.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const catalogosWithIdOnly = await prisma.catalogos.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends CatalogosFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CatalogosFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CatalogosPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Catalogos.
     * @param {CatalogosCreateArgs} args - Arguments to create a Catalogos.
     * @example
     * // Create one Catalogos
     * const Catalogos = await prisma.catalogos.create({
     *   data: {
     *     // ... data to create a Catalogos
     *   }
     * })
     * 
    **/
    create<T extends CatalogosCreateArgs<ExtArgs>>(
      args: SelectSubset<T, CatalogosCreateArgs<ExtArgs>>
    ): Prisma__CatalogosClient<$Result.GetResult<Prisma.$CatalogosPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Catalogos.
     *     @param {CatalogosCreateManyArgs} args - Arguments to create many Catalogos.
     *     @example
     *     // Create many Catalogos
     *     const catalogos = await prisma.catalogos.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends CatalogosCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CatalogosCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Catalogos.
     * @param {CatalogosDeleteArgs} args - Arguments to delete one Catalogos.
     * @example
     * // Delete one Catalogos
     * const Catalogos = await prisma.catalogos.delete({
     *   where: {
     *     // ... filter to delete one Catalogos
     *   }
     * })
     * 
    **/
    delete<T extends CatalogosDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, CatalogosDeleteArgs<ExtArgs>>
    ): Prisma__CatalogosClient<$Result.GetResult<Prisma.$CatalogosPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Catalogos.
     * @param {CatalogosUpdateArgs} args - Arguments to update one Catalogos.
     * @example
     * // Update one Catalogos
     * const catalogos = await prisma.catalogos.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CatalogosUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, CatalogosUpdateArgs<ExtArgs>>
    ): Prisma__CatalogosClient<$Result.GetResult<Prisma.$CatalogosPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Catalogos.
     * @param {CatalogosDeleteManyArgs} args - Arguments to filter Catalogos to delete.
     * @example
     * // Delete a few Catalogos
     * const { count } = await prisma.catalogos.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CatalogosDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CatalogosDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Catalogos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CatalogosUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Catalogos
     * const catalogos = await prisma.catalogos.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CatalogosUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, CatalogosUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Catalogos.
     * @param {CatalogosUpsertArgs} args - Arguments to update or create a Catalogos.
     * @example
     * // Update or create a Catalogos
     * const catalogos = await prisma.catalogos.upsert({
     *   create: {
     *     // ... data to create a Catalogos
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Catalogos we want to update
     *   }
     * })
    **/
    upsert<T extends CatalogosUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, CatalogosUpsertArgs<ExtArgs>>
    ): Prisma__CatalogosClient<$Result.GetResult<Prisma.$CatalogosPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Catalogos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CatalogosCountArgs} args - Arguments to filter Catalogos to count.
     * @example
     * // Count the number of Catalogos
     * const count = await prisma.catalogos.count({
     *   where: {
     *     // ... the filter for the Catalogos we want to count
     *   }
     * })
    **/
    count<T extends CatalogosCountArgs>(
      args?: Subset<T, CatalogosCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CatalogosCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Catalogos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CatalogosAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CatalogosAggregateArgs>(args: Subset<T, CatalogosAggregateArgs>): Prisma.PrismaPromise<GetCatalogosAggregateType<T>>

    /**
     * Group by Catalogos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CatalogosGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CatalogosGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CatalogosGroupByArgs['orderBy'] }
        : { orderBy?: CatalogosGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CatalogosGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCatalogosGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Catalogos model
   */
  readonly fields: CatalogosFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Catalogos.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CatalogosClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    categorias<T extends Catalogos$categoriasArgs<ExtArgs> = {}>(args?: Subset<T, Catalogos$categoriasArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CategoriasPayload<ExtArgs>, T, 'findMany'> | Null>;

    Admins<T extends AdminDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AdminDefaultArgs<ExtArgs>>): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Catalogos model
   */ 
  interface CatalogosFieldRefs {
    readonly id: FieldRef<"Catalogos", 'Int'>
    readonly Nombre: FieldRef<"Catalogos", 'String'>
    readonly Descripcion: FieldRef<"Catalogos", 'String'>
    readonly id_Admin: FieldRef<"Catalogos", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Catalogos findUnique
   */
  export type CatalogosFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Catalogos
     */
    select?: CatalogosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CatalogosInclude<ExtArgs> | null
    /**
     * Filter, which Catalogos to fetch.
     */
    where: CatalogosWhereUniqueInput
  }

  /**
   * Catalogos findUniqueOrThrow
   */
  export type CatalogosFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Catalogos
     */
    select?: CatalogosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CatalogosInclude<ExtArgs> | null
    /**
     * Filter, which Catalogos to fetch.
     */
    where: CatalogosWhereUniqueInput
  }

  /**
   * Catalogos findFirst
   */
  export type CatalogosFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Catalogos
     */
    select?: CatalogosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CatalogosInclude<ExtArgs> | null
    /**
     * Filter, which Catalogos to fetch.
     */
    where?: CatalogosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Catalogos to fetch.
     */
    orderBy?: CatalogosOrderByWithRelationInput | CatalogosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Catalogos.
     */
    cursor?: CatalogosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Catalogos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Catalogos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Catalogos.
     */
    distinct?: CatalogosScalarFieldEnum | CatalogosScalarFieldEnum[]
  }

  /**
   * Catalogos findFirstOrThrow
   */
  export type CatalogosFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Catalogos
     */
    select?: CatalogosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CatalogosInclude<ExtArgs> | null
    /**
     * Filter, which Catalogos to fetch.
     */
    where?: CatalogosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Catalogos to fetch.
     */
    orderBy?: CatalogosOrderByWithRelationInput | CatalogosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Catalogos.
     */
    cursor?: CatalogosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Catalogos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Catalogos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Catalogos.
     */
    distinct?: CatalogosScalarFieldEnum | CatalogosScalarFieldEnum[]
  }

  /**
   * Catalogos findMany
   */
  export type CatalogosFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Catalogos
     */
    select?: CatalogosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CatalogosInclude<ExtArgs> | null
    /**
     * Filter, which Catalogos to fetch.
     */
    where?: CatalogosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Catalogos to fetch.
     */
    orderBy?: CatalogosOrderByWithRelationInput | CatalogosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Catalogos.
     */
    cursor?: CatalogosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Catalogos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Catalogos.
     */
    skip?: number
    distinct?: CatalogosScalarFieldEnum | CatalogosScalarFieldEnum[]
  }

  /**
   * Catalogos create
   */
  export type CatalogosCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Catalogos
     */
    select?: CatalogosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CatalogosInclude<ExtArgs> | null
    /**
     * The data needed to create a Catalogos.
     */
    data: XOR<CatalogosCreateInput, CatalogosUncheckedCreateInput>
  }

  /**
   * Catalogos createMany
   */
  export type CatalogosCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Catalogos.
     */
    data: CatalogosCreateManyInput | CatalogosCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Catalogos update
   */
  export type CatalogosUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Catalogos
     */
    select?: CatalogosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CatalogosInclude<ExtArgs> | null
    /**
     * The data needed to update a Catalogos.
     */
    data: XOR<CatalogosUpdateInput, CatalogosUncheckedUpdateInput>
    /**
     * Choose, which Catalogos to update.
     */
    where: CatalogosWhereUniqueInput
  }

  /**
   * Catalogos updateMany
   */
  export type CatalogosUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Catalogos.
     */
    data: XOR<CatalogosUpdateManyMutationInput, CatalogosUncheckedUpdateManyInput>
    /**
     * Filter which Catalogos to update
     */
    where?: CatalogosWhereInput
  }

  /**
   * Catalogos upsert
   */
  export type CatalogosUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Catalogos
     */
    select?: CatalogosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CatalogosInclude<ExtArgs> | null
    /**
     * The filter to search for the Catalogos to update in case it exists.
     */
    where: CatalogosWhereUniqueInput
    /**
     * In case the Catalogos found by the `where` argument doesn't exist, create a new Catalogos with this data.
     */
    create: XOR<CatalogosCreateInput, CatalogosUncheckedCreateInput>
    /**
     * In case the Catalogos was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CatalogosUpdateInput, CatalogosUncheckedUpdateInput>
  }

  /**
   * Catalogos delete
   */
  export type CatalogosDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Catalogos
     */
    select?: CatalogosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CatalogosInclude<ExtArgs> | null
    /**
     * Filter which Catalogos to delete.
     */
    where: CatalogosWhereUniqueInput
  }

  /**
   * Catalogos deleteMany
   */
  export type CatalogosDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Catalogos to delete
     */
    where?: CatalogosWhereInput
  }

  /**
   * Catalogos.categorias
   */
  export type Catalogos$categoriasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Categorias
     */
    select?: CategoriasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoriasInclude<ExtArgs> | null
    where?: CategoriasWhereInput
    orderBy?: CategoriasOrderByWithRelationInput | CategoriasOrderByWithRelationInput[]
    cursor?: CategoriasWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CategoriasScalarFieldEnum | CategoriasScalarFieldEnum[]
  }

  /**
   * Catalogos without action
   */
  export type CatalogosDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Catalogos
     */
    select?: CatalogosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CatalogosInclude<ExtArgs> | null
  }


  /**
   * Model Categorias
   */

  export type AggregateCategorias = {
    _count: CategoriasCountAggregateOutputType | null
    _avg: CategoriasAvgAggregateOutputType | null
    _sum: CategoriasSumAggregateOutputType | null
    _min: CategoriasMinAggregateOutputType | null
    _max: CategoriasMaxAggregateOutputType | null
  }

  export type CategoriasAvgAggregateOutputType = {
    id: number | null
    id_Cat: number | null
    id_Admin: number | null
  }

  export type CategoriasSumAggregateOutputType = {
    id: number | null
    id_Cat: number | null
    id_Admin: number | null
  }

  export type CategoriasMinAggregateOutputType = {
    id: number | null
    Nombre: string | null
    id_Cat: number | null
    id_Admin: number | null
  }

  export type CategoriasMaxAggregateOutputType = {
    id: number | null
    Nombre: string | null
    id_Cat: number | null
    id_Admin: number | null
  }

  export type CategoriasCountAggregateOutputType = {
    id: number
    Nombre: number
    id_Cat: number
    id_Admin: number
    _all: number
  }


  export type CategoriasAvgAggregateInputType = {
    id?: true
    id_Cat?: true
    id_Admin?: true
  }

  export type CategoriasSumAggregateInputType = {
    id?: true
    id_Cat?: true
    id_Admin?: true
  }

  export type CategoriasMinAggregateInputType = {
    id?: true
    Nombre?: true
    id_Cat?: true
    id_Admin?: true
  }

  export type CategoriasMaxAggregateInputType = {
    id?: true
    Nombre?: true
    id_Cat?: true
    id_Admin?: true
  }

  export type CategoriasCountAggregateInputType = {
    id?: true
    Nombre?: true
    id_Cat?: true
    id_Admin?: true
    _all?: true
  }

  export type CategoriasAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Categorias to aggregate.
     */
    where?: CategoriasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categorias to fetch.
     */
    orderBy?: CategoriasOrderByWithRelationInput | CategoriasOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CategoriasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categorias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categorias.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Categorias
    **/
    _count?: true | CategoriasCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CategoriasAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CategoriasSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CategoriasMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CategoriasMaxAggregateInputType
  }

  export type GetCategoriasAggregateType<T extends CategoriasAggregateArgs> = {
        [P in keyof T & keyof AggregateCategorias]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCategorias[P]>
      : GetScalarType<T[P], AggregateCategorias[P]>
  }




  export type CategoriasGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CategoriasWhereInput
    orderBy?: CategoriasOrderByWithAggregationInput | CategoriasOrderByWithAggregationInput[]
    by: CategoriasScalarFieldEnum[] | CategoriasScalarFieldEnum
    having?: CategoriasScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CategoriasCountAggregateInputType | true
    _avg?: CategoriasAvgAggregateInputType
    _sum?: CategoriasSumAggregateInputType
    _min?: CategoriasMinAggregateInputType
    _max?: CategoriasMaxAggregateInputType
  }

  export type CategoriasGroupByOutputType = {
    id: number
    Nombre: string
    id_Cat: number
    id_Admin: number
    _count: CategoriasCountAggregateOutputType | null
    _avg: CategoriasAvgAggregateOutputType | null
    _sum: CategoriasSumAggregateOutputType | null
    _min: CategoriasMinAggregateOutputType | null
    _max: CategoriasMaxAggregateOutputType | null
  }

  type GetCategoriasGroupByPayload<T extends CategoriasGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CategoriasGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CategoriasGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CategoriasGroupByOutputType[P]>
            : GetScalarType<T[P], CategoriasGroupByOutputType[P]>
        }
      >
    >


  export type CategoriasSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    Nombre?: boolean
    id_Cat?: boolean
    id_Admin?: boolean
    productos?: boolean | Categorias$productosArgs<ExtArgs>
    catalogos?: boolean | CatalogosDefaultArgs<ExtArgs>
    Admins?: boolean | AdminDefaultArgs<ExtArgs>
    _count?: boolean | CategoriasCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["categorias"]>

  export type CategoriasSelectScalar = {
    id?: boolean
    Nombre?: boolean
    id_Cat?: boolean
    id_Admin?: boolean
  }


  export type CategoriasInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    productos?: boolean | Categorias$productosArgs<ExtArgs>
    catalogos?: boolean | CatalogosDefaultArgs<ExtArgs>
    Admins?: boolean | AdminDefaultArgs<ExtArgs>
    _count?: boolean | CategoriasCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $CategoriasPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Categorias"
    objects: {
      productos: Prisma.$ProductosPayload<ExtArgs>[]
      catalogos: Prisma.$CatalogosPayload<ExtArgs>
      Admins: Prisma.$AdminPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      Nombre: string
      id_Cat: number
      id_Admin: number
    }, ExtArgs["result"]["categorias"]>
    composites: {}
  }


  type CategoriasGetPayload<S extends boolean | null | undefined | CategoriasDefaultArgs> = $Result.GetResult<Prisma.$CategoriasPayload, S>

  type CategoriasCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CategoriasFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CategoriasCountAggregateInputType | true
    }

  export interface CategoriasDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Categorias'], meta: { name: 'Categorias' } }
    /**
     * Find zero or one Categorias that matches the filter.
     * @param {CategoriasFindUniqueArgs} args - Arguments to find a Categorias
     * @example
     * // Get one Categorias
     * const categorias = await prisma.categorias.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CategoriasFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, CategoriasFindUniqueArgs<ExtArgs>>
    ): Prisma__CategoriasClient<$Result.GetResult<Prisma.$CategoriasPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Categorias that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {CategoriasFindUniqueOrThrowArgs} args - Arguments to find a Categorias
     * @example
     * // Get one Categorias
     * const categorias = await prisma.categorias.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends CategoriasFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CategoriasFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__CategoriasClient<$Result.GetResult<Prisma.$CategoriasPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Categorias that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoriasFindFirstArgs} args - Arguments to find a Categorias
     * @example
     * // Get one Categorias
     * const categorias = await prisma.categorias.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CategoriasFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, CategoriasFindFirstArgs<ExtArgs>>
    ): Prisma__CategoriasClient<$Result.GetResult<Prisma.$CategoriasPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Categorias that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoriasFindFirstOrThrowArgs} args - Arguments to find a Categorias
     * @example
     * // Get one Categorias
     * const categorias = await prisma.categorias.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends CategoriasFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CategoriasFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__CategoriasClient<$Result.GetResult<Prisma.$CategoriasPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Categorias that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoriasFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Categorias
     * const categorias = await prisma.categorias.findMany()
     * 
     * // Get first 10 Categorias
     * const categorias = await prisma.categorias.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const categoriasWithIdOnly = await prisma.categorias.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends CategoriasFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CategoriasFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CategoriasPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Categorias.
     * @param {CategoriasCreateArgs} args - Arguments to create a Categorias.
     * @example
     * // Create one Categorias
     * const Categorias = await prisma.categorias.create({
     *   data: {
     *     // ... data to create a Categorias
     *   }
     * })
     * 
    **/
    create<T extends CategoriasCreateArgs<ExtArgs>>(
      args: SelectSubset<T, CategoriasCreateArgs<ExtArgs>>
    ): Prisma__CategoriasClient<$Result.GetResult<Prisma.$CategoriasPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Categorias.
     *     @param {CategoriasCreateManyArgs} args - Arguments to create many Categorias.
     *     @example
     *     // Create many Categorias
     *     const categorias = await prisma.categorias.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends CategoriasCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CategoriasCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Categorias.
     * @param {CategoriasDeleteArgs} args - Arguments to delete one Categorias.
     * @example
     * // Delete one Categorias
     * const Categorias = await prisma.categorias.delete({
     *   where: {
     *     // ... filter to delete one Categorias
     *   }
     * })
     * 
    **/
    delete<T extends CategoriasDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, CategoriasDeleteArgs<ExtArgs>>
    ): Prisma__CategoriasClient<$Result.GetResult<Prisma.$CategoriasPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Categorias.
     * @param {CategoriasUpdateArgs} args - Arguments to update one Categorias.
     * @example
     * // Update one Categorias
     * const categorias = await prisma.categorias.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CategoriasUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, CategoriasUpdateArgs<ExtArgs>>
    ): Prisma__CategoriasClient<$Result.GetResult<Prisma.$CategoriasPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Categorias.
     * @param {CategoriasDeleteManyArgs} args - Arguments to filter Categorias to delete.
     * @example
     * // Delete a few Categorias
     * const { count } = await prisma.categorias.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CategoriasDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CategoriasDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Categorias.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoriasUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Categorias
     * const categorias = await prisma.categorias.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CategoriasUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, CategoriasUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Categorias.
     * @param {CategoriasUpsertArgs} args - Arguments to update or create a Categorias.
     * @example
     * // Update or create a Categorias
     * const categorias = await prisma.categorias.upsert({
     *   create: {
     *     // ... data to create a Categorias
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Categorias we want to update
     *   }
     * })
    **/
    upsert<T extends CategoriasUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, CategoriasUpsertArgs<ExtArgs>>
    ): Prisma__CategoriasClient<$Result.GetResult<Prisma.$CategoriasPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Categorias.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoriasCountArgs} args - Arguments to filter Categorias to count.
     * @example
     * // Count the number of Categorias
     * const count = await prisma.categorias.count({
     *   where: {
     *     // ... the filter for the Categorias we want to count
     *   }
     * })
    **/
    count<T extends CategoriasCountArgs>(
      args?: Subset<T, CategoriasCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CategoriasCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Categorias.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoriasAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CategoriasAggregateArgs>(args: Subset<T, CategoriasAggregateArgs>): Prisma.PrismaPromise<GetCategoriasAggregateType<T>>

    /**
     * Group by Categorias.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoriasGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CategoriasGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CategoriasGroupByArgs['orderBy'] }
        : { orderBy?: CategoriasGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CategoriasGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCategoriasGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Categorias model
   */
  readonly fields: CategoriasFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Categorias.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CategoriasClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    productos<T extends Categorias$productosArgs<ExtArgs> = {}>(args?: Subset<T, Categorias$productosArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductosPayload<ExtArgs>, T, 'findMany'> | Null>;

    catalogos<T extends CatalogosDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CatalogosDefaultArgs<ExtArgs>>): Prisma__CatalogosClient<$Result.GetResult<Prisma.$CatalogosPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    Admins<T extends AdminDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AdminDefaultArgs<ExtArgs>>): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Categorias model
   */ 
  interface CategoriasFieldRefs {
    readonly id: FieldRef<"Categorias", 'Int'>
    readonly Nombre: FieldRef<"Categorias", 'String'>
    readonly id_Cat: FieldRef<"Categorias", 'Int'>
    readonly id_Admin: FieldRef<"Categorias", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Categorias findUnique
   */
  export type CategoriasFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Categorias
     */
    select?: CategoriasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoriasInclude<ExtArgs> | null
    /**
     * Filter, which Categorias to fetch.
     */
    where: CategoriasWhereUniqueInput
  }

  /**
   * Categorias findUniqueOrThrow
   */
  export type CategoriasFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Categorias
     */
    select?: CategoriasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoriasInclude<ExtArgs> | null
    /**
     * Filter, which Categorias to fetch.
     */
    where: CategoriasWhereUniqueInput
  }

  /**
   * Categorias findFirst
   */
  export type CategoriasFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Categorias
     */
    select?: CategoriasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoriasInclude<ExtArgs> | null
    /**
     * Filter, which Categorias to fetch.
     */
    where?: CategoriasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categorias to fetch.
     */
    orderBy?: CategoriasOrderByWithRelationInput | CategoriasOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Categorias.
     */
    cursor?: CategoriasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categorias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categorias.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Categorias.
     */
    distinct?: CategoriasScalarFieldEnum | CategoriasScalarFieldEnum[]
  }

  /**
   * Categorias findFirstOrThrow
   */
  export type CategoriasFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Categorias
     */
    select?: CategoriasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoriasInclude<ExtArgs> | null
    /**
     * Filter, which Categorias to fetch.
     */
    where?: CategoriasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categorias to fetch.
     */
    orderBy?: CategoriasOrderByWithRelationInput | CategoriasOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Categorias.
     */
    cursor?: CategoriasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categorias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categorias.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Categorias.
     */
    distinct?: CategoriasScalarFieldEnum | CategoriasScalarFieldEnum[]
  }

  /**
   * Categorias findMany
   */
  export type CategoriasFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Categorias
     */
    select?: CategoriasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoriasInclude<ExtArgs> | null
    /**
     * Filter, which Categorias to fetch.
     */
    where?: CategoriasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categorias to fetch.
     */
    orderBy?: CategoriasOrderByWithRelationInput | CategoriasOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Categorias.
     */
    cursor?: CategoriasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categorias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categorias.
     */
    skip?: number
    distinct?: CategoriasScalarFieldEnum | CategoriasScalarFieldEnum[]
  }

  /**
   * Categorias create
   */
  export type CategoriasCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Categorias
     */
    select?: CategoriasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoriasInclude<ExtArgs> | null
    /**
     * The data needed to create a Categorias.
     */
    data: XOR<CategoriasCreateInput, CategoriasUncheckedCreateInput>
  }

  /**
   * Categorias createMany
   */
  export type CategoriasCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Categorias.
     */
    data: CategoriasCreateManyInput | CategoriasCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Categorias update
   */
  export type CategoriasUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Categorias
     */
    select?: CategoriasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoriasInclude<ExtArgs> | null
    /**
     * The data needed to update a Categorias.
     */
    data: XOR<CategoriasUpdateInput, CategoriasUncheckedUpdateInput>
    /**
     * Choose, which Categorias to update.
     */
    where: CategoriasWhereUniqueInput
  }

  /**
   * Categorias updateMany
   */
  export type CategoriasUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Categorias.
     */
    data: XOR<CategoriasUpdateManyMutationInput, CategoriasUncheckedUpdateManyInput>
    /**
     * Filter which Categorias to update
     */
    where?: CategoriasWhereInput
  }

  /**
   * Categorias upsert
   */
  export type CategoriasUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Categorias
     */
    select?: CategoriasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoriasInclude<ExtArgs> | null
    /**
     * The filter to search for the Categorias to update in case it exists.
     */
    where: CategoriasWhereUniqueInput
    /**
     * In case the Categorias found by the `where` argument doesn't exist, create a new Categorias with this data.
     */
    create: XOR<CategoriasCreateInput, CategoriasUncheckedCreateInput>
    /**
     * In case the Categorias was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CategoriasUpdateInput, CategoriasUncheckedUpdateInput>
  }

  /**
   * Categorias delete
   */
  export type CategoriasDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Categorias
     */
    select?: CategoriasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoriasInclude<ExtArgs> | null
    /**
     * Filter which Categorias to delete.
     */
    where: CategoriasWhereUniqueInput
  }

  /**
   * Categorias deleteMany
   */
  export type CategoriasDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Categorias to delete
     */
    where?: CategoriasWhereInput
  }

  /**
   * Categorias.productos
   */
  export type Categorias$productosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Productos
     */
    select?: ProductosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductosInclude<ExtArgs> | null
    where?: ProductosWhereInput
    orderBy?: ProductosOrderByWithRelationInput | ProductosOrderByWithRelationInput[]
    cursor?: ProductosWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProductosScalarFieldEnum | ProductosScalarFieldEnum[]
  }

  /**
   * Categorias without action
   */
  export type CategoriasDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Categorias
     */
    select?: CategoriasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoriasInclude<ExtArgs> | null
  }


  /**
   * Model Admin
   */

  export type AggregateAdmin = {
    _count: AdminCountAggregateOutputType | null
    _avg: AdminAvgAggregateOutputType | null
    _sum: AdminSumAggregateOutputType | null
    _min: AdminMinAggregateOutputType | null
    _max: AdminMaxAggregateOutputType | null
  }

  export type AdminAvgAggregateOutputType = {
    id: number | null
    id_Rol: number | null
  }

  export type AdminSumAggregateOutputType = {
    id: number | null
    id_Rol: number | null
  }

  export type AdminMinAggregateOutputType = {
    id: number | null
    Email: string | null
    UserName: string | null
    Password: string | null
    celular: string | null
    id_Rol: number | null
  }

  export type AdminMaxAggregateOutputType = {
    id: number | null
    Email: string | null
    UserName: string | null
    Password: string | null
    celular: string | null
    id_Rol: number | null
  }

  export type AdminCountAggregateOutputType = {
    id: number
    Email: number
    UserName: number
    Password: number
    celular: number
    id_Rol: number
    _all: number
  }


  export type AdminAvgAggregateInputType = {
    id?: true
    id_Rol?: true
  }

  export type AdminSumAggregateInputType = {
    id?: true
    id_Rol?: true
  }

  export type AdminMinAggregateInputType = {
    id?: true
    Email?: true
    UserName?: true
    Password?: true
    celular?: true
    id_Rol?: true
  }

  export type AdminMaxAggregateInputType = {
    id?: true
    Email?: true
    UserName?: true
    Password?: true
    celular?: true
    id_Rol?: true
  }

  export type AdminCountAggregateInputType = {
    id?: true
    Email?: true
    UserName?: true
    Password?: true
    celular?: true
    id_Rol?: true
    _all?: true
  }

  export type AdminAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Admin to aggregate.
     */
    where?: AdminWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Admins to fetch.
     */
    orderBy?: AdminOrderByWithRelationInput | AdminOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AdminWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Admins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Admins.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Admins
    **/
    _count?: true | AdminCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AdminAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AdminSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AdminMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AdminMaxAggregateInputType
  }

  export type GetAdminAggregateType<T extends AdminAggregateArgs> = {
        [P in keyof T & keyof AggregateAdmin]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAdmin[P]>
      : GetScalarType<T[P], AggregateAdmin[P]>
  }




  export type AdminGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AdminWhereInput
    orderBy?: AdminOrderByWithAggregationInput | AdminOrderByWithAggregationInput[]
    by: AdminScalarFieldEnum[] | AdminScalarFieldEnum
    having?: AdminScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AdminCountAggregateInputType | true
    _avg?: AdminAvgAggregateInputType
    _sum?: AdminSumAggregateInputType
    _min?: AdminMinAggregateInputType
    _max?: AdminMaxAggregateInputType
  }

  export type AdminGroupByOutputType = {
    id: number
    Email: string
    UserName: string
    Password: string
    celular: string
    id_Rol: number
    _count: AdminCountAggregateOutputType | null
    _avg: AdminAvgAggregateOutputType | null
    _sum: AdminSumAggregateOutputType | null
    _min: AdminMinAggregateOutputType | null
    _max: AdminMaxAggregateOutputType | null
  }

  type GetAdminGroupByPayload<T extends AdminGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AdminGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AdminGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AdminGroupByOutputType[P]>
            : GetScalarType<T[P], AdminGroupByOutputType[P]>
        }
      >
    >


  export type AdminSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    Email?: boolean
    UserName?: boolean
    Password?: boolean
    celular?: boolean
    id_Rol?: boolean
    roles?: boolean | RolesDefaultArgs<ExtArgs>
    catalogos?: boolean | Admin$catalogosArgs<ExtArgs>
    categorias?: boolean | Admin$categoriasArgs<ExtArgs>
    _count?: boolean | AdminCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["admin"]>

  export type AdminSelectScalar = {
    id?: boolean
    Email?: boolean
    UserName?: boolean
    Password?: boolean
    celular?: boolean
    id_Rol?: boolean
  }


  export type AdminInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    roles?: boolean | RolesDefaultArgs<ExtArgs>
    catalogos?: boolean | Admin$catalogosArgs<ExtArgs>
    categorias?: boolean | Admin$categoriasArgs<ExtArgs>
    _count?: boolean | AdminCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $AdminPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Admin"
    objects: {
      roles: Prisma.$RolesPayload<ExtArgs>
      catalogos: Prisma.$CatalogosPayload<ExtArgs>[]
      categorias: Prisma.$CategoriasPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      Email: string
      UserName: string
      Password: string
      celular: string
      id_Rol: number
    }, ExtArgs["result"]["admin"]>
    composites: {}
  }


  type AdminGetPayload<S extends boolean | null | undefined | AdminDefaultArgs> = $Result.GetResult<Prisma.$AdminPayload, S>

  type AdminCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<AdminFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: AdminCountAggregateInputType | true
    }

  export interface AdminDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Admin'], meta: { name: 'Admin' } }
    /**
     * Find zero or one Admin that matches the filter.
     * @param {AdminFindUniqueArgs} args - Arguments to find a Admin
     * @example
     * // Get one Admin
     * const admin = await prisma.admin.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends AdminFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, AdminFindUniqueArgs<ExtArgs>>
    ): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Admin that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {AdminFindUniqueOrThrowArgs} args - Arguments to find a Admin
     * @example
     * // Get one Admin
     * const admin = await prisma.admin.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends AdminFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, AdminFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Admin that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminFindFirstArgs} args - Arguments to find a Admin
     * @example
     * // Get one Admin
     * const admin = await prisma.admin.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends AdminFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, AdminFindFirstArgs<ExtArgs>>
    ): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Admin that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminFindFirstOrThrowArgs} args - Arguments to find a Admin
     * @example
     * // Get one Admin
     * const admin = await prisma.admin.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends AdminFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, AdminFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Admins that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Admins
     * const admins = await prisma.admin.findMany()
     * 
     * // Get first 10 Admins
     * const admins = await prisma.admin.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const adminWithIdOnly = await prisma.admin.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends AdminFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AdminFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Admin.
     * @param {AdminCreateArgs} args - Arguments to create a Admin.
     * @example
     * // Create one Admin
     * const Admin = await prisma.admin.create({
     *   data: {
     *     // ... data to create a Admin
     *   }
     * })
     * 
    **/
    create<T extends AdminCreateArgs<ExtArgs>>(
      args: SelectSubset<T, AdminCreateArgs<ExtArgs>>
    ): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Admins.
     *     @param {AdminCreateManyArgs} args - Arguments to create many Admins.
     *     @example
     *     // Create many Admins
     *     const admin = await prisma.admin.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends AdminCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AdminCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Admin.
     * @param {AdminDeleteArgs} args - Arguments to delete one Admin.
     * @example
     * // Delete one Admin
     * const Admin = await prisma.admin.delete({
     *   where: {
     *     // ... filter to delete one Admin
     *   }
     * })
     * 
    **/
    delete<T extends AdminDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, AdminDeleteArgs<ExtArgs>>
    ): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Admin.
     * @param {AdminUpdateArgs} args - Arguments to update one Admin.
     * @example
     * // Update one Admin
     * const admin = await prisma.admin.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends AdminUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, AdminUpdateArgs<ExtArgs>>
    ): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Admins.
     * @param {AdminDeleteManyArgs} args - Arguments to filter Admins to delete.
     * @example
     * // Delete a few Admins
     * const { count } = await prisma.admin.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends AdminDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AdminDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Admins.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Admins
     * const admin = await prisma.admin.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends AdminUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, AdminUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Admin.
     * @param {AdminUpsertArgs} args - Arguments to update or create a Admin.
     * @example
     * // Update or create a Admin
     * const admin = await prisma.admin.upsert({
     *   create: {
     *     // ... data to create a Admin
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Admin we want to update
     *   }
     * })
    **/
    upsert<T extends AdminUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, AdminUpsertArgs<ExtArgs>>
    ): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Admins.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminCountArgs} args - Arguments to filter Admins to count.
     * @example
     * // Count the number of Admins
     * const count = await prisma.admin.count({
     *   where: {
     *     // ... the filter for the Admins we want to count
     *   }
     * })
    **/
    count<T extends AdminCountArgs>(
      args?: Subset<T, AdminCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AdminCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Admin.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AdminAggregateArgs>(args: Subset<T, AdminAggregateArgs>): Prisma.PrismaPromise<GetAdminAggregateType<T>>

    /**
     * Group by Admin.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AdminGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AdminGroupByArgs['orderBy'] }
        : { orderBy?: AdminGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AdminGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAdminGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Admin model
   */
  readonly fields: AdminFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Admin.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AdminClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    roles<T extends RolesDefaultArgs<ExtArgs> = {}>(args?: Subset<T, RolesDefaultArgs<ExtArgs>>): Prisma__RolesClient<$Result.GetResult<Prisma.$RolesPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    catalogos<T extends Admin$catalogosArgs<ExtArgs> = {}>(args?: Subset<T, Admin$catalogosArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CatalogosPayload<ExtArgs>, T, 'findMany'> | Null>;

    categorias<T extends Admin$categoriasArgs<ExtArgs> = {}>(args?: Subset<T, Admin$categoriasArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CategoriasPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Admin model
   */ 
  interface AdminFieldRefs {
    readonly id: FieldRef<"Admin", 'Int'>
    readonly Email: FieldRef<"Admin", 'String'>
    readonly UserName: FieldRef<"Admin", 'String'>
    readonly Password: FieldRef<"Admin", 'String'>
    readonly celular: FieldRef<"Admin", 'String'>
    readonly id_Rol: FieldRef<"Admin", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Admin findUnique
   */
  export type AdminFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminInclude<ExtArgs> | null
    /**
     * Filter, which Admin to fetch.
     */
    where: AdminWhereUniqueInput
  }

  /**
   * Admin findUniqueOrThrow
   */
  export type AdminFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminInclude<ExtArgs> | null
    /**
     * Filter, which Admin to fetch.
     */
    where: AdminWhereUniqueInput
  }

  /**
   * Admin findFirst
   */
  export type AdminFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminInclude<ExtArgs> | null
    /**
     * Filter, which Admin to fetch.
     */
    where?: AdminWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Admins to fetch.
     */
    orderBy?: AdminOrderByWithRelationInput | AdminOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Admins.
     */
    cursor?: AdminWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Admins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Admins.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Admins.
     */
    distinct?: AdminScalarFieldEnum | AdminScalarFieldEnum[]
  }

  /**
   * Admin findFirstOrThrow
   */
  export type AdminFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminInclude<ExtArgs> | null
    /**
     * Filter, which Admin to fetch.
     */
    where?: AdminWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Admins to fetch.
     */
    orderBy?: AdminOrderByWithRelationInput | AdminOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Admins.
     */
    cursor?: AdminWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Admins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Admins.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Admins.
     */
    distinct?: AdminScalarFieldEnum | AdminScalarFieldEnum[]
  }

  /**
   * Admin findMany
   */
  export type AdminFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminInclude<ExtArgs> | null
    /**
     * Filter, which Admins to fetch.
     */
    where?: AdminWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Admins to fetch.
     */
    orderBy?: AdminOrderByWithRelationInput | AdminOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Admins.
     */
    cursor?: AdminWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Admins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Admins.
     */
    skip?: number
    distinct?: AdminScalarFieldEnum | AdminScalarFieldEnum[]
  }

  /**
   * Admin create
   */
  export type AdminCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminInclude<ExtArgs> | null
    /**
     * The data needed to create a Admin.
     */
    data: XOR<AdminCreateInput, AdminUncheckedCreateInput>
  }

  /**
   * Admin createMany
   */
  export type AdminCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Admins.
     */
    data: AdminCreateManyInput | AdminCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Admin update
   */
  export type AdminUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminInclude<ExtArgs> | null
    /**
     * The data needed to update a Admin.
     */
    data: XOR<AdminUpdateInput, AdminUncheckedUpdateInput>
    /**
     * Choose, which Admin to update.
     */
    where: AdminWhereUniqueInput
  }

  /**
   * Admin updateMany
   */
  export type AdminUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Admins.
     */
    data: XOR<AdminUpdateManyMutationInput, AdminUncheckedUpdateManyInput>
    /**
     * Filter which Admins to update
     */
    where?: AdminWhereInput
  }

  /**
   * Admin upsert
   */
  export type AdminUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminInclude<ExtArgs> | null
    /**
     * The filter to search for the Admin to update in case it exists.
     */
    where: AdminWhereUniqueInput
    /**
     * In case the Admin found by the `where` argument doesn't exist, create a new Admin with this data.
     */
    create: XOR<AdminCreateInput, AdminUncheckedCreateInput>
    /**
     * In case the Admin was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AdminUpdateInput, AdminUncheckedUpdateInput>
  }

  /**
   * Admin delete
   */
  export type AdminDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminInclude<ExtArgs> | null
    /**
     * Filter which Admin to delete.
     */
    where: AdminWhereUniqueInput
  }

  /**
   * Admin deleteMany
   */
  export type AdminDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Admins to delete
     */
    where?: AdminWhereInput
  }

  /**
   * Admin.catalogos
   */
  export type Admin$catalogosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Catalogos
     */
    select?: CatalogosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CatalogosInclude<ExtArgs> | null
    where?: CatalogosWhereInput
    orderBy?: CatalogosOrderByWithRelationInput | CatalogosOrderByWithRelationInput[]
    cursor?: CatalogosWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CatalogosScalarFieldEnum | CatalogosScalarFieldEnum[]
  }

  /**
   * Admin.categorias
   */
  export type Admin$categoriasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Categorias
     */
    select?: CategoriasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoriasInclude<ExtArgs> | null
    where?: CategoriasWhereInput
    orderBy?: CategoriasOrderByWithRelationInput | CategoriasOrderByWithRelationInput[]
    cursor?: CategoriasWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CategoriasScalarFieldEnum | CategoriasScalarFieldEnum[]
  }

  /**
   * Admin without action
   */
  export type AdminDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminInclude<ExtArgs> | null
  }


  /**
   * Model Productos
   */

  export type AggregateProductos = {
    _count: ProductosCountAggregateOutputType | null
    _avg: ProductosAvgAggregateOutputType | null
    _sum: ProductosSumAggregateOutputType | null
    _min: ProductosMinAggregateOutputType | null
    _max: ProductosMaxAggregateOutputType | null
  }

  export type ProductosAvgAggregateOutputType = {
    id: number | null
    id_Categoria: number | null
    id_Usuario: number | null
  }

  export type ProductosSumAggregateOutputType = {
    id: number | null
    id_Categoria: number | null
    id_Usuario: number | null
  }

  export type ProductosMinAggregateOutputType = {
    id: number | null
    Nombre: string | null
    Descripcion: string | null
    Disponibilidad: boolean | null
    Precio: string | null
    Presentacion: string | null
    Imagen: string | null
    id_Categoria: number | null
    id_Usuario: number | null
  }

  export type ProductosMaxAggregateOutputType = {
    id: number | null
    Nombre: string | null
    Descripcion: string | null
    Disponibilidad: boolean | null
    Precio: string | null
    Presentacion: string | null
    Imagen: string | null
    id_Categoria: number | null
    id_Usuario: number | null
  }

  export type ProductosCountAggregateOutputType = {
    id: number
    Nombre: number
    Descripcion: number
    Disponibilidad: number
    Precio: number
    Presentacion: number
    Imagen: number
    id_Categoria: number
    id_Usuario: number
    _all: number
  }


  export type ProductosAvgAggregateInputType = {
    id?: true
    id_Categoria?: true
    id_Usuario?: true
  }

  export type ProductosSumAggregateInputType = {
    id?: true
    id_Categoria?: true
    id_Usuario?: true
  }

  export type ProductosMinAggregateInputType = {
    id?: true
    Nombre?: true
    Descripcion?: true
    Disponibilidad?: true
    Precio?: true
    Presentacion?: true
    Imagen?: true
    id_Categoria?: true
    id_Usuario?: true
  }

  export type ProductosMaxAggregateInputType = {
    id?: true
    Nombre?: true
    Descripcion?: true
    Disponibilidad?: true
    Precio?: true
    Presentacion?: true
    Imagen?: true
    id_Categoria?: true
    id_Usuario?: true
  }

  export type ProductosCountAggregateInputType = {
    id?: true
    Nombre?: true
    Descripcion?: true
    Disponibilidad?: true
    Precio?: true
    Presentacion?: true
    Imagen?: true
    id_Categoria?: true
    id_Usuario?: true
    _all?: true
  }

  export type ProductosAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Productos to aggregate.
     */
    where?: ProductosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Productos to fetch.
     */
    orderBy?: ProductosOrderByWithRelationInput | ProductosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProductosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Productos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Productos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Productos
    **/
    _count?: true | ProductosCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProductosAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProductosSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProductosMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProductosMaxAggregateInputType
  }

  export type GetProductosAggregateType<T extends ProductosAggregateArgs> = {
        [P in keyof T & keyof AggregateProductos]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProductos[P]>
      : GetScalarType<T[P], AggregateProductos[P]>
  }




  export type ProductosGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProductosWhereInput
    orderBy?: ProductosOrderByWithAggregationInput | ProductosOrderByWithAggregationInput[]
    by: ProductosScalarFieldEnum[] | ProductosScalarFieldEnum
    having?: ProductosScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProductosCountAggregateInputType | true
    _avg?: ProductosAvgAggregateInputType
    _sum?: ProductosSumAggregateInputType
    _min?: ProductosMinAggregateInputType
    _max?: ProductosMaxAggregateInputType
  }

  export type ProductosGroupByOutputType = {
    id: number
    Nombre: string
    Descripcion: string
    Disponibilidad: boolean
    Precio: string
    Presentacion: string
    Imagen: string
    id_Categoria: number
    id_Usuario: number
    _count: ProductosCountAggregateOutputType | null
    _avg: ProductosAvgAggregateOutputType | null
    _sum: ProductosSumAggregateOutputType | null
    _min: ProductosMinAggregateOutputType | null
    _max: ProductosMaxAggregateOutputType | null
  }

  type GetProductosGroupByPayload<T extends ProductosGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProductosGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProductosGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProductosGroupByOutputType[P]>
            : GetScalarType<T[P], ProductosGroupByOutputType[P]>
        }
      >
    >


  export type ProductosSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    Nombre?: boolean
    Descripcion?: boolean
    Disponibilidad?: boolean
    Precio?: boolean
    Presentacion?: boolean
    Imagen?: boolean
    id_Categoria?: boolean
    id_Usuario?: boolean
    categorias?: boolean | CategoriasDefaultArgs<ExtArgs>
    usuarios?: boolean | UsuarioDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["productos"]>

  export type ProductosSelectScalar = {
    id?: boolean
    Nombre?: boolean
    Descripcion?: boolean
    Disponibilidad?: boolean
    Precio?: boolean
    Presentacion?: boolean
    Imagen?: boolean
    id_Categoria?: boolean
    id_Usuario?: boolean
  }


  export type ProductosInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    categorias?: boolean | CategoriasDefaultArgs<ExtArgs>
    usuarios?: boolean | UsuarioDefaultArgs<ExtArgs>
  }


  export type $ProductosPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Productos"
    objects: {
      categorias: Prisma.$CategoriasPayload<ExtArgs>
      usuarios: Prisma.$UsuarioPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      Nombre: string
      Descripcion: string
      Disponibilidad: boolean
      Precio: string
      Presentacion: string
      Imagen: string
      id_Categoria: number
      id_Usuario: number
    }, ExtArgs["result"]["productos"]>
    composites: {}
  }


  type ProductosGetPayload<S extends boolean | null | undefined | ProductosDefaultArgs> = $Result.GetResult<Prisma.$ProductosPayload, S>

  type ProductosCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ProductosFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ProductosCountAggregateInputType | true
    }

  export interface ProductosDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Productos'], meta: { name: 'Productos' } }
    /**
     * Find zero or one Productos that matches the filter.
     * @param {ProductosFindUniqueArgs} args - Arguments to find a Productos
     * @example
     * // Get one Productos
     * const productos = await prisma.productos.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ProductosFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ProductosFindUniqueArgs<ExtArgs>>
    ): Prisma__ProductosClient<$Result.GetResult<Prisma.$ProductosPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Productos that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ProductosFindUniqueOrThrowArgs} args - Arguments to find a Productos
     * @example
     * // Get one Productos
     * const productos = await prisma.productos.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ProductosFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ProductosFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ProductosClient<$Result.GetResult<Prisma.$ProductosPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Productos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductosFindFirstArgs} args - Arguments to find a Productos
     * @example
     * // Get one Productos
     * const productos = await prisma.productos.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ProductosFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ProductosFindFirstArgs<ExtArgs>>
    ): Prisma__ProductosClient<$Result.GetResult<Prisma.$ProductosPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Productos that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductosFindFirstOrThrowArgs} args - Arguments to find a Productos
     * @example
     * // Get one Productos
     * const productos = await prisma.productos.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ProductosFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ProductosFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ProductosClient<$Result.GetResult<Prisma.$ProductosPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Productos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductosFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Productos
     * const productos = await prisma.productos.findMany()
     * 
     * // Get first 10 Productos
     * const productos = await prisma.productos.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const productosWithIdOnly = await prisma.productos.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ProductosFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ProductosFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductosPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Productos.
     * @param {ProductosCreateArgs} args - Arguments to create a Productos.
     * @example
     * // Create one Productos
     * const Productos = await prisma.productos.create({
     *   data: {
     *     // ... data to create a Productos
     *   }
     * })
     * 
    **/
    create<T extends ProductosCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ProductosCreateArgs<ExtArgs>>
    ): Prisma__ProductosClient<$Result.GetResult<Prisma.$ProductosPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Productos.
     *     @param {ProductosCreateManyArgs} args - Arguments to create many Productos.
     *     @example
     *     // Create many Productos
     *     const productos = await prisma.productos.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ProductosCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ProductosCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Productos.
     * @param {ProductosDeleteArgs} args - Arguments to delete one Productos.
     * @example
     * // Delete one Productos
     * const Productos = await prisma.productos.delete({
     *   where: {
     *     // ... filter to delete one Productos
     *   }
     * })
     * 
    **/
    delete<T extends ProductosDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ProductosDeleteArgs<ExtArgs>>
    ): Prisma__ProductosClient<$Result.GetResult<Prisma.$ProductosPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Productos.
     * @param {ProductosUpdateArgs} args - Arguments to update one Productos.
     * @example
     * // Update one Productos
     * const productos = await prisma.productos.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ProductosUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ProductosUpdateArgs<ExtArgs>>
    ): Prisma__ProductosClient<$Result.GetResult<Prisma.$ProductosPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Productos.
     * @param {ProductosDeleteManyArgs} args - Arguments to filter Productos to delete.
     * @example
     * // Delete a few Productos
     * const { count } = await prisma.productos.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ProductosDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ProductosDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Productos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductosUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Productos
     * const productos = await prisma.productos.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ProductosUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ProductosUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Productos.
     * @param {ProductosUpsertArgs} args - Arguments to update or create a Productos.
     * @example
     * // Update or create a Productos
     * const productos = await prisma.productos.upsert({
     *   create: {
     *     // ... data to create a Productos
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Productos we want to update
     *   }
     * })
    **/
    upsert<T extends ProductosUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ProductosUpsertArgs<ExtArgs>>
    ): Prisma__ProductosClient<$Result.GetResult<Prisma.$ProductosPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Productos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductosCountArgs} args - Arguments to filter Productos to count.
     * @example
     * // Count the number of Productos
     * const count = await prisma.productos.count({
     *   where: {
     *     // ... the filter for the Productos we want to count
     *   }
     * })
    **/
    count<T extends ProductosCountArgs>(
      args?: Subset<T, ProductosCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProductosCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Productos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductosAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProductosAggregateArgs>(args: Subset<T, ProductosAggregateArgs>): Prisma.PrismaPromise<GetProductosAggregateType<T>>

    /**
     * Group by Productos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductosGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProductosGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProductosGroupByArgs['orderBy'] }
        : { orderBy?: ProductosGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProductosGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProductosGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Productos model
   */
  readonly fields: ProductosFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Productos.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProductosClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    categorias<T extends CategoriasDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CategoriasDefaultArgs<ExtArgs>>): Prisma__CategoriasClient<$Result.GetResult<Prisma.$CategoriasPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    usuarios<T extends UsuarioDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UsuarioDefaultArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Productos model
   */ 
  interface ProductosFieldRefs {
    readonly id: FieldRef<"Productos", 'Int'>
    readonly Nombre: FieldRef<"Productos", 'String'>
    readonly Descripcion: FieldRef<"Productos", 'String'>
    readonly Disponibilidad: FieldRef<"Productos", 'Boolean'>
    readonly Precio: FieldRef<"Productos", 'String'>
    readonly Presentacion: FieldRef<"Productos", 'String'>
    readonly Imagen: FieldRef<"Productos", 'String'>
    readonly id_Categoria: FieldRef<"Productos", 'Int'>
    readonly id_Usuario: FieldRef<"Productos", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Productos findUnique
   */
  export type ProductosFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Productos
     */
    select?: ProductosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductosInclude<ExtArgs> | null
    /**
     * Filter, which Productos to fetch.
     */
    where: ProductosWhereUniqueInput
  }

  /**
   * Productos findUniqueOrThrow
   */
  export type ProductosFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Productos
     */
    select?: ProductosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductosInclude<ExtArgs> | null
    /**
     * Filter, which Productos to fetch.
     */
    where: ProductosWhereUniqueInput
  }

  /**
   * Productos findFirst
   */
  export type ProductosFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Productos
     */
    select?: ProductosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductosInclude<ExtArgs> | null
    /**
     * Filter, which Productos to fetch.
     */
    where?: ProductosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Productos to fetch.
     */
    orderBy?: ProductosOrderByWithRelationInput | ProductosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Productos.
     */
    cursor?: ProductosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Productos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Productos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Productos.
     */
    distinct?: ProductosScalarFieldEnum | ProductosScalarFieldEnum[]
  }

  /**
   * Productos findFirstOrThrow
   */
  export type ProductosFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Productos
     */
    select?: ProductosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductosInclude<ExtArgs> | null
    /**
     * Filter, which Productos to fetch.
     */
    where?: ProductosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Productos to fetch.
     */
    orderBy?: ProductosOrderByWithRelationInput | ProductosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Productos.
     */
    cursor?: ProductosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Productos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Productos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Productos.
     */
    distinct?: ProductosScalarFieldEnum | ProductosScalarFieldEnum[]
  }

  /**
   * Productos findMany
   */
  export type ProductosFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Productos
     */
    select?: ProductosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductosInclude<ExtArgs> | null
    /**
     * Filter, which Productos to fetch.
     */
    where?: ProductosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Productos to fetch.
     */
    orderBy?: ProductosOrderByWithRelationInput | ProductosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Productos.
     */
    cursor?: ProductosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Productos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Productos.
     */
    skip?: number
    distinct?: ProductosScalarFieldEnum | ProductosScalarFieldEnum[]
  }

  /**
   * Productos create
   */
  export type ProductosCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Productos
     */
    select?: ProductosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductosInclude<ExtArgs> | null
    /**
     * The data needed to create a Productos.
     */
    data: XOR<ProductosCreateInput, ProductosUncheckedCreateInput>
  }

  /**
   * Productos createMany
   */
  export type ProductosCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Productos.
     */
    data: ProductosCreateManyInput | ProductosCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Productos update
   */
  export type ProductosUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Productos
     */
    select?: ProductosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductosInclude<ExtArgs> | null
    /**
     * The data needed to update a Productos.
     */
    data: XOR<ProductosUpdateInput, ProductosUncheckedUpdateInput>
    /**
     * Choose, which Productos to update.
     */
    where: ProductosWhereUniqueInput
  }

  /**
   * Productos updateMany
   */
  export type ProductosUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Productos.
     */
    data: XOR<ProductosUpdateManyMutationInput, ProductosUncheckedUpdateManyInput>
    /**
     * Filter which Productos to update
     */
    where?: ProductosWhereInput
  }

  /**
   * Productos upsert
   */
  export type ProductosUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Productos
     */
    select?: ProductosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductosInclude<ExtArgs> | null
    /**
     * The filter to search for the Productos to update in case it exists.
     */
    where: ProductosWhereUniqueInput
    /**
     * In case the Productos found by the `where` argument doesn't exist, create a new Productos with this data.
     */
    create: XOR<ProductosCreateInput, ProductosUncheckedCreateInput>
    /**
     * In case the Productos was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProductosUpdateInput, ProductosUncheckedUpdateInput>
  }

  /**
   * Productos delete
   */
  export type ProductosDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Productos
     */
    select?: ProductosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductosInclude<ExtArgs> | null
    /**
     * Filter which Productos to delete.
     */
    where: ProductosWhereUniqueInput
  }

  /**
   * Productos deleteMany
   */
  export type ProductosDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Productos to delete
     */
    where?: ProductosWhereInput
  }

  /**
   * Productos without action
   */
  export type ProductosDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Productos
     */
    select?: ProductosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductosInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UsuarioScalarFieldEnum: {
    id: 'id',
    Nombres: 'Nombres',
    Apellidos: 'Apellidos',
    UserName: 'UserName',
    Password: 'Password',
    Email: 'Email',
    Celular: 'Celular',
    Imagen: 'Imagen',
    DateCreated: 'DateCreated',
    id_Rol: 'id_Rol'
  };

  export type UsuarioScalarFieldEnum = (typeof UsuarioScalarFieldEnum)[keyof typeof UsuarioScalarFieldEnum]


  export const RolesScalarFieldEnum: {
    id: 'id',
    Nombre: 'Nombre'
  };

  export type RolesScalarFieldEnum = (typeof RolesScalarFieldEnum)[keyof typeof RolesScalarFieldEnum]


  export const CatalogosScalarFieldEnum: {
    id: 'id',
    Nombre: 'Nombre',
    Descripcion: 'Descripcion',
    id_Admin: 'id_Admin'
  };

  export type CatalogosScalarFieldEnum = (typeof CatalogosScalarFieldEnum)[keyof typeof CatalogosScalarFieldEnum]


  export const CategoriasScalarFieldEnum: {
    id: 'id',
    Nombre: 'Nombre',
    id_Cat: 'id_Cat',
    id_Admin: 'id_Admin'
  };

  export type CategoriasScalarFieldEnum = (typeof CategoriasScalarFieldEnum)[keyof typeof CategoriasScalarFieldEnum]


  export const AdminScalarFieldEnum: {
    id: 'id',
    Email: 'Email',
    UserName: 'UserName',
    Password: 'Password',
    celular: 'celular',
    id_Rol: 'id_Rol'
  };

  export type AdminScalarFieldEnum = (typeof AdminScalarFieldEnum)[keyof typeof AdminScalarFieldEnum]


  export const ProductosScalarFieldEnum: {
    id: 'id',
    Nombre: 'Nombre',
    Descripcion: 'Descripcion',
    Disponibilidad: 'Disponibilidad',
    Precio: 'Precio',
    Presentacion: 'Presentacion',
    Imagen: 'Imagen',
    id_Categoria: 'id_Categoria',
    id_Usuario: 'id_Usuario'
  };

  export type ProductosScalarFieldEnum = (typeof ProductosScalarFieldEnum)[keyof typeof ProductosScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    
  /**
   * Deep Input Types
   */


  export type UsuarioWhereInput = {
    AND?: UsuarioWhereInput | UsuarioWhereInput[]
    OR?: UsuarioWhereInput[]
    NOT?: UsuarioWhereInput | UsuarioWhereInput[]
    id?: IntFilter<"Usuario"> | number
    Nombres?: StringFilter<"Usuario"> | string
    Apellidos?: StringFilter<"Usuario"> | string
    UserName?: StringFilter<"Usuario"> | string
    Password?: StringFilter<"Usuario"> | string
    Email?: StringFilter<"Usuario"> | string
    Celular?: StringFilter<"Usuario"> | string
    Imagen?: StringFilter<"Usuario"> | string
    DateCreated?: DateTimeFilter<"Usuario"> | Date | string
    id_Rol?: IntFilter<"Usuario"> | number
    roles?: XOR<RolesRelationFilter, RolesWhereInput>
    productos?: ProductosListRelationFilter
  }

  export type UsuarioOrderByWithRelationInput = {
    id?: SortOrder
    Nombres?: SortOrder
    Apellidos?: SortOrder
    UserName?: SortOrder
    Password?: SortOrder
    Email?: SortOrder
    Celular?: SortOrder
    Imagen?: SortOrder
    DateCreated?: SortOrder
    id_Rol?: SortOrder
    roles?: RolesOrderByWithRelationInput
    productos?: ProductosOrderByRelationAggregateInput
  }

  export type UsuarioWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    UserName?: string
    Email?: string
    AND?: UsuarioWhereInput | UsuarioWhereInput[]
    OR?: UsuarioWhereInput[]
    NOT?: UsuarioWhereInput | UsuarioWhereInput[]
    Nombres?: StringFilter<"Usuario"> | string
    Apellidos?: StringFilter<"Usuario"> | string
    Password?: StringFilter<"Usuario"> | string
    Celular?: StringFilter<"Usuario"> | string
    Imagen?: StringFilter<"Usuario"> | string
    DateCreated?: DateTimeFilter<"Usuario"> | Date | string
    id_Rol?: IntFilter<"Usuario"> | number
    roles?: XOR<RolesRelationFilter, RolesWhereInput>
    productos?: ProductosListRelationFilter
  }, "id" | "UserName" | "Email">

  export type UsuarioOrderByWithAggregationInput = {
    id?: SortOrder
    Nombres?: SortOrder
    Apellidos?: SortOrder
    UserName?: SortOrder
    Password?: SortOrder
    Email?: SortOrder
    Celular?: SortOrder
    Imagen?: SortOrder
    DateCreated?: SortOrder
    id_Rol?: SortOrder
    _count?: UsuarioCountOrderByAggregateInput
    _avg?: UsuarioAvgOrderByAggregateInput
    _max?: UsuarioMaxOrderByAggregateInput
    _min?: UsuarioMinOrderByAggregateInput
    _sum?: UsuarioSumOrderByAggregateInput
  }

  export type UsuarioScalarWhereWithAggregatesInput = {
    AND?: UsuarioScalarWhereWithAggregatesInput | UsuarioScalarWhereWithAggregatesInput[]
    OR?: UsuarioScalarWhereWithAggregatesInput[]
    NOT?: UsuarioScalarWhereWithAggregatesInput | UsuarioScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Usuario"> | number
    Nombres?: StringWithAggregatesFilter<"Usuario"> | string
    Apellidos?: StringWithAggregatesFilter<"Usuario"> | string
    UserName?: StringWithAggregatesFilter<"Usuario"> | string
    Password?: StringWithAggregatesFilter<"Usuario"> | string
    Email?: StringWithAggregatesFilter<"Usuario"> | string
    Celular?: StringWithAggregatesFilter<"Usuario"> | string
    Imagen?: StringWithAggregatesFilter<"Usuario"> | string
    DateCreated?: DateTimeWithAggregatesFilter<"Usuario"> | Date | string
    id_Rol?: IntWithAggregatesFilter<"Usuario"> | number
  }

  export type RolesWhereInput = {
    AND?: RolesWhereInput | RolesWhereInput[]
    OR?: RolesWhereInput[]
    NOT?: RolesWhereInput | RolesWhereInput[]
    id?: IntFilter<"Roles"> | number
    Nombre?: StringFilter<"Roles"> | string
    usuarios?: UsuarioListRelationFilter
    Admins?: AdminListRelationFilter
  }

  export type RolesOrderByWithRelationInput = {
    id?: SortOrder
    Nombre?: SortOrder
    usuarios?: UsuarioOrderByRelationAggregateInput
    Admins?: AdminOrderByRelationAggregateInput
  }

  export type RolesWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: RolesWhereInput | RolesWhereInput[]
    OR?: RolesWhereInput[]
    NOT?: RolesWhereInput | RolesWhereInput[]
    Nombre?: StringFilter<"Roles"> | string
    usuarios?: UsuarioListRelationFilter
    Admins?: AdminListRelationFilter
  }, "id">

  export type RolesOrderByWithAggregationInput = {
    id?: SortOrder
    Nombre?: SortOrder
    _count?: RolesCountOrderByAggregateInput
    _avg?: RolesAvgOrderByAggregateInput
    _max?: RolesMaxOrderByAggregateInput
    _min?: RolesMinOrderByAggregateInput
    _sum?: RolesSumOrderByAggregateInput
  }

  export type RolesScalarWhereWithAggregatesInput = {
    AND?: RolesScalarWhereWithAggregatesInput | RolesScalarWhereWithAggregatesInput[]
    OR?: RolesScalarWhereWithAggregatesInput[]
    NOT?: RolesScalarWhereWithAggregatesInput | RolesScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Roles"> | number
    Nombre?: StringWithAggregatesFilter<"Roles"> | string
  }

  export type CatalogosWhereInput = {
    AND?: CatalogosWhereInput | CatalogosWhereInput[]
    OR?: CatalogosWhereInput[]
    NOT?: CatalogosWhereInput | CatalogosWhereInput[]
    id?: IntFilter<"Catalogos"> | number
    Nombre?: StringFilter<"Catalogos"> | string
    Descripcion?: StringNullableFilter<"Catalogos"> | string | null
    id_Admin?: IntFilter<"Catalogos"> | number
    categorias?: CategoriasListRelationFilter
    Admins?: XOR<AdminRelationFilter, AdminWhereInput>
  }

  export type CatalogosOrderByWithRelationInput = {
    id?: SortOrder
    Nombre?: SortOrder
    Descripcion?: SortOrderInput | SortOrder
    id_Admin?: SortOrder
    categorias?: CategoriasOrderByRelationAggregateInput
    Admins?: AdminOrderByWithRelationInput
  }

  export type CatalogosWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    Nombre?: string
    AND?: CatalogosWhereInput | CatalogosWhereInput[]
    OR?: CatalogosWhereInput[]
    NOT?: CatalogosWhereInput | CatalogosWhereInput[]
    Descripcion?: StringNullableFilter<"Catalogos"> | string | null
    id_Admin?: IntFilter<"Catalogos"> | number
    categorias?: CategoriasListRelationFilter
    Admins?: XOR<AdminRelationFilter, AdminWhereInput>
  }, "id" | "Nombre">

  export type CatalogosOrderByWithAggregationInput = {
    id?: SortOrder
    Nombre?: SortOrder
    Descripcion?: SortOrderInput | SortOrder
    id_Admin?: SortOrder
    _count?: CatalogosCountOrderByAggregateInput
    _avg?: CatalogosAvgOrderByAggregateInput
    _max?: CatalogosMaxOrderByAggregateInput
    _min?: CatalogosMinOrderByAggregateInput
    _sum?: CatalogosSumOrderByAggregateInput
  }

  export type CatalogosScalarWhereWithAggregatesInput = {
    AND?: CatalogosScalarWhereWithAggregatesInput | CatalogosScalarWhereWithAggregatesInput[]
    OR?: CatalogosScalarWhereWithAggregatesInput[]
    NOT?: CatalogosScalarWhereWithAggregatesInput | CatalogosScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Catalogos"> | number
    Nombre?: StringWithAggregatesFilter<"Catalogos"> | string
    Descripcion?: StringNullableWithAggregatesFilter<"Catalogos"> | string | null
    id_Admin?: IntWithAggregatesFilter<"Catalogos"> | number
  }

  export type CategoriasWhereInput = {
    AND?: CategoriasWhereInput | CategoriasWhereInput[]
    OR?: CategoriasWhereInput[]
    NOT?: CategoriasWhereInput | CategoriasWhereInput[]
    id?: IntFilter<"Categorias"> | number
    Nombre?: StringFilter<"Categorias"> | string
    id_Cat?: IntFilter<"Categorias"> | number
    id_Admin?: IntFilter<"Categorias"> | number
    productos?: ProductosListRelationFilter
    catalogos?: XOR<CatalogosRelationFilter, CatalogosWhereInput>
    Admins?: XOR<AdminRelationFilter, AdminWhereInput>
  }

  export type CategoriasOrderByWithRelationInput = {
    id?: SortOrder
    Nombre?: SortOrder
    id_Cat?: SortOrder
    id_Admin?: SortOrder
    productos?: ProductosOrderByRelationAggregateInput
    catalogos?: CatalogosOrderByWithRelationInput
    Admins?: AdminOrderByWithRelationInput
  }

  export type CategoriasWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    Nombre?: string
    AND?: CategoriasWhereInput | CategoriasWhereInput[]
    OR?: CategoriasWhereInput[]
    NOT?: CategoriasWhereInput | CategoriasWhereInput[]
    id_Cat?: IntFilter<"Categorias"> | number
    id_Admin?: IntFilter<"Categorias"> | number
    productos?: ProductosListRelationFilter
    catalogos?: XOR<CatalogosRelationFilter, CatalogosWhereInput>
    Admins?: XOR<AdminRelationFilter, AdminWhereInput>
  }, "id" | "Nombre">

  export type CategoriasOrderByWithAggregationInput = {
    id?: SortOrder
    Nombre?: SortOrder
    id_Cat?: SortOrder
    id_Admin?: SortOrder
    _count?: CategoriasCountOrderByAggregateInput
    _avg?: CategoriasAvgOrderByAggregateInput
    _max?: CategoriasMaxOrderByAggregateInput
    _min?: CategoriasMinOrderByAggregateInput
    _sum?: CategoriasSumOrderByAggregateInput
  }

  export type CategoriasScalarWhereWithAggregatesInput = {
    AND?: CategoriasScalarWhereWithAggregatesInput | CategoriasScalarWhereWithAggregatesInput[]
    OR?: CategoriasScalarWhereWithAggregatesInput[]
    NOT?: CategoriasScalarWhereWithAggregatesInput | CategoriasScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Categorias"> | number
    Nombre?: StringWithAggregatesFilter<"Categorias"> | string
    id_Cat?: IntWithAggregatesFilter<"Categorias"> | number
    id_Admin?: IntWithAggregatesFilter<"Categorias"> | number
  }

  export type AdminWhereInput = {
    AND?: AdminWhereInput | AdminWhereInput[]
    OR?: AdminWhereInput[]
    NOT?: AdminWhereInput | AdminWhereInput[]
    id?: IntFilter<"Admin"> | number
    Email?: StringFilter<"Admin"> | string
    UserName?: StringFilter<"Admin"> | string
    Password?: StringFilter<"Admin"> | string
    celular?: StringFilter<"Admin"> | string
    id_Rol?: IntFilter<"Admin"> | number
    roles?: XOR<RolesRelationFilter, RolesWhereInput>
    catalogos?: CatalogosListRelationFilter
    categorias?: CategoriasListRelationFilter
  }

  export type AdminOrderByWithRelationInput = {
    id?: SortOrder
    Email?: SortOrder
    UserName?: SortOrder
    Password?: SortOrder
    celular?: SortOrder
    id_Rol?: SortOrder
    roles?: RolesOrderByWithRelationInput
    catalogos?: CatalogosOrderByRelationAggregateInput
    categorias?: CategoriasOrderByRelationAggregateInput
  }

  export type AdminWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    Email?: string
    UserName?: string
    AND?: AdminWhereInput | AdminWhereInput[]
    OR?: AdminWhereInput[]
    NOT?: AdminWhereInput | AdminWhereInput[]
    Password?: StringFilter<"Admin"> | string
    celular?: StringFilter<"Admin"> | string
    id_Rol?: IntFilter<"Admin"> | number
    roles?: XOR<RolesRelationFilter, RolesWhereInput>
    catalogos?: CatalogosListRelationFilter
    categorias?: CategoriasListRelationFilter
  }, "id" | "Email" | "UserName">

  export type AdminOrderByWithAggregationInput = {
    id?: SortOrder
    Email?: SortOrder
    UserName?: SortOrder
    Password?: SortOrder
    celular?: SortOrder
    id_Rol?: SortOrder
    _count?: AdminCountOrderByAggregateInput
    _avg?: AdminAvgOrderByAggregateInput
    _max?: AdminMaxOrderByAggregateInput
    _min?: AdminMinOrderByAggregateInput
    _sum?: AdminSumOrderByAggregateInput
  }

  export type AdminScalarWhereWithAggregatesInput = {
    AND?: AdminScalarWhereWithAggregatesInput | AdminScalarWhereWithAggregatesInput[]
    OR?: AdminScalarWhereWithAggregatesInput[]
    NOT?: AdminScalarWhereWithAggregatesInput | AdminScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Admin"> | number
    Email?: StringWithAggregatesFilter<"Admin"> | string
    UserName?: StringWithAggregatesFilter<"Admin"> | string
    Password?: StringWithAggregatesFilter<"Admin"> | string
    celular?: StringWithAggregatesFilter<"Admin"> | string
    id_Rol?: IntWithAggregatesFilter<"Admin"> | number
  }

  export type ProductosWhereInput = {
    AND?: ProductosWhereInput | ProductosWhereInput[]
    OR?: ProductosWhereInput[]
    NOT?: ProductosWhereInput | ProductosWhereInput[]
    id?: IntFilter<"Productos"> | number
    Nombre?: StringFilter<"Productos"> | string
    Descripcion?: StringFilter<"Productos"> | string
    Disponibilidad?: BoolFilter<"Productos"> | boolean
    Precio?: StringFilter<"Productos"> | string
    Presentacion?: StringFilter<"Productos"> | string
    Imagen?: StringFilter<"Productos"> | string
    id_Categoria?: IntFilter<"Productos"> | number
    id_Usuario?: IntFilter<"Productos"> | number
    categorias?: XOR<CategoriasRelationFilter, CategoriasWhereInput>
    usuarios?: XOR<UsuarioRelationFilter, UsuarioWhereInput>
  }

  export type ProductosOrderByWithRelationInput = {
    id?: SortOrder
    Nombre?: SortOrder
    Descripcion?: SortOrder
    Disponibilidad?: SortOrder
    Precio?: SortOrder
    Presentacion?: SortOrder
    Imagen?: SortOrder
    id_Categoria?: SortOrder
    id_Usuario?: SortOrder
    categorias?: CategoriasOrderByWithRelationInput
    usuarios?: UsuarioOrderByWithRelationInput
  }

  export type ProductosWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ProductosWhereInput | ProductosWhereInput[]
    OR?: ProductosWhereInput[]
    NOT?: ProductosWhereInput | ProductosWhereInput[]
    Nombre?: StringFilter<"Productos"> | string
    Descripcion?: StringFilter<"Productos"> | string
    Disponibilidad?: BoolFilter<"Productos"> | boolean
    Precio?: StringFilter<"Productos"> | string
    Presentacion?: StringFilter<"Productos"> | string
    Imagen?: StringFilter<"Productos"> | string
    id_Categoria?: IntFilter<"Productos"> | number
    id_Usuario?: IntFilter<"Productos"> | number
    categorias?: XOR<CategoriasRelationFilter, CategoriasWhereInput>
    usuarios?: XOR<UsuarioRelationFilter, UsuarioWhereInput>
  }, "id">

  export type ProductosOrderByWithAggregationInput = {
    id?: SortOrder
    Nombre?: SortOrder
    Descripcion?: SortOrder
    Disponibilidad?: SortOrder
    Precio?: SortOrder
    Presentacion?: SortOrder
    Imagen?: SortOrder
    id_Categoria?: SortOrder
    id_Usuario?: SortOrder
    _count?: ProductosCountOrderByAggregateInput
    _avg?: ProductosAvgOrderByAggregateInput
    _max?: ProductosMaxOrderByAggregateInput
    _min?: ProductosMinOrderByAggregateInput
    _sum?: ProductosSumOrderByAggregateInput
  }

  export type ProductosScalarWhereWithAggregatesInput = {
    AND?: ProductosScalarWhereWithAggregatesInput | ProductosScalarWhereWithAggregatesInput[]
    OR?: ProductosScalarWhereWithAggregatesInput[]
    NOT?: ProductosScalarWhereWithAggregatesInput | ProductosScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Productos"> | number
    Nombre?: StringWithAggregatesFilter<"Productos"> | string
    Descripcion?: StringWithAggregatesFilter<"Productos"> | string
    Disponibilidad?: BoolWithAggregatesFilter<"Productos"> | boolean
    Precio?: StringWithAggregatesFilter<"Productos"> | string
    Presentacion?: StringWithAggregatesFilter<"Productos"> | string
    Imagen?: StringWithAggregatesFilter<"Productos"> | string
    id_Categoria?: IntWithAggregatesFilter<"Productos"> | number
    id_Usuario?: IntWithAggregatesFilter<"Productos"> | number
  }

  export type UsuarioCreateInput = {
    Nombres: string
    Apellidos: string
    UserName: string
    Password: string
    Email: string
    Celular: string
    Imagen: string
    DateCreated?: Date | string
    roles: RolesCreateNestedOneWithoutUsuariosInput
    productos?: ProductosCreateNestedManyWithoutUsuariosInput
  }

  export type UsuarioUncheckedCreateInput = {
    id?: number
    Nombres: string
    Apellidos: string
    UserName: string
    Password: string
    Email: string
    Celular: string
    Imagen: string
    DateCreated?: Date | string
    id_Rol: number
    productos?: ProductosUncheckedCreateNestedManyWithoutUsuariosInput
  }

  export type UsuarioUpdateInput = {
    Nombres?: StringFieldUpdateOperationsInput | string
    Apellidos?: StringFieldUpdateOperationsInput | string
    UserName?: StringFieldUpdateOperationsInput | string
    Password?: StringFieldUpdateOperationsInput | string
    Email?: StringFieldUpdateOperationsInput | string
    Celular?: StringFieldUpdateOperationsInput | string
    Imagen?: StringFieldUpdateOperationsInput | string
    DateCreated?: DateTimeFieldUpdateOperationsInput | Date | string
    roles?: RolesUpdateOneRequiredWithoutUsuariosNestedInput
    productos?: ProductosUpdateManyWithoutUsuariosNestedInput
  }

  export type UsuarioUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    Nombres?: StringFieldUpdateOperationsInput | string
    Apellidos?: StringFieldUpdateOperationsInput | string
    UserName?: StringFieldUpdateOperationsInput | string
    Password?: StringFieldUpdateOperationsInput | string
    Email?: StringFieldUpdateOperationsInput | string
    Celular?: StringFieldUpdateOperationsInput | string
    Imagen?: StringFieldUpdateOperationsInput | string
    DateCreated?: DateTimeFieldUpdateOperationsInput | Date | string
    id_Rol?: IntFieldUpdateOperationsInput | number
    productos?: ProductosUncheckedUpdateManyWithoutUsuariosNestedInput
  }

  export type UsuarioCreateManyInput = {
    id?: number
    Nombres: string
    Apellidos: string
    UserName: string
    Password: string
    Email: string
    Celular: string
    Imagen: string
    DateCreated?: Date | string
    id_Rol: number
  }

  export type UsuarioUpdateManyMutationInput = {
    Nombres?: StringFieldUpdateOperationsInput | string
    Apellidos?: StringFieldUpdateOperationsInput | string
    UserName?: StringFieldUpdateOperationsInput | string
    Password?: StringFieldUpdateOperationsInput | string
    Email?: StringFieldUpdateOperationsInput | string
    Celular?: StringFieldUpdateOperationsInput | string
    Imagen?: StringFieldUpdateOperationsInput | string
    DateCreated?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UsuarioUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    Nombres?: StringFieldUpdateOperationsInput | string
    Apellidos?: StringFieldUpdateOperationsInput | string
    UserName?: StringFieldUpdateOperationsInput | string
    Password?: StringFieldUpdateOperationsInput | string
    Email?: StringFieldUpdateOperationsInput | string
    Celular?: StringFieldUpdateOperationsInput | string
    Imagen?: StringFieldUpdateOperationsInput | string
    DateCreated?: DateTimeFieldUpdateOperationsInput | Date | string
    id_Rol?: IntFieldUpdateOperationsInput | number
  }

  export type RolesCreateInput = {
    Nombre: string
    usuarios?: UsuarioCreateNestedManyWithoutRolesInput
    Admins?: AdminCreateNestedManyWithoutRolesInput
  }

  export type RolesUncheckedCreateInput = {
    id?: number
    Nombre: string
    usuarios?: UsuarioUncheckedCreateNestedManyWithoutRolesInput
    Admins?: AdminUncheckedCreateNestedManyWithoutRolesInput
  }

  export type RolesUpdateInput = {
    Nombre?: StringFieldUpdateOperationsInput | string
    usuarios?: UsuarioUpdateManyWithoutRolesNestedInput
    Admins?: AdminUpdateManyWithoutRolesNestedInput
  }

  export type RolesUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    Nombre?: StringFieldUpdateOperationsInput | string
    usuarios?: UsuarioUncheckedUpdateManyWithoutRolesNestedInput
    Admins?: AdminUncheckedUpdateManyWithoutRolesNestedInput
  }

  export type RolesCreateManyInput = {
    id?: number
    Nombre: string
  }

  export type RolesUpdateManyMutationInput = {
    Nombre?: StringFieldUpdateOperationsInput | string
  }

  export type RolesUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    Nombre?: StringFieldUpdateOperationsInput | string
  }

  export type CatalogosCreateInput = {
    Nombre: string
    Descripcion?: string | null
    categorias?: CategoriasCreateNestedManyWithoutCatalogosInput
    Admins: AdminCreateNestedOneWithoutCatalogosInput
  }

  export type CatalogosUncheckedCreateInput = {
    id?: number
    Nombre: string
    Descripcion?: string | null
    id_Admin: number
    categorias?: CategoriasUncheckedCreateNestedManyWithoutCatalogosInput
  }

  export type CatalogosUpdateInput = {
    Nombre?: StringFieldUpdateOperationsInput | string
    Descripcion?: NullableStringFieldUpdateOperationsInput | string | null
    categorias?: CategoriasUpdateManyWithoutCatalogosNestedInput
    Admins?: AdminUpdateOneRequiredWithoutCatalogosNestedInput
  }

  export type CatalogosUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    Nombre?: StringFieldUpdateOperationsInput | string
    Descripcion?: NullableStringFieldUpdateOperationsInput | string | null
    id_Admin?: IntFieldUpdateOperationsInput | number
    categorias?: CategoriasUncheckedUpdateManyWithoutCatalogosNestedInput
  }

  export type CatalogosCreateManyInput = {
    id?: number
    Nombre: string
    Descripcion?: string | null
    id_Admin: number
  }

  export type CatalogosUpdateManyMutationInput = {
    Nombre?: StringFieldUpdateOperationsInput | string
    Descripcion?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CatalogosUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    Nombre?: StringFieldUpdateOperationsInput | string
    Descripcion?: NullableStringFieldUpdateOperationsInput | string | null
    id_Admin?: IntFieldUpdateOperationsInput | number
  }

  export type CategoriasCreateInput = {
    Nombre: string
    productos?: ProductosCreateNestedManyWithoutCategoriasInput
    catalogos: CatalogosCreateNestedOneWithoutCategoriasInput
    Admins: AdminCreateNestedOneWithoutCategoriasInput
  }

  export type CategoriasUncheckedCreateInput = {
    id?: number
    Nombre: string
    id_Cat: number
    id_Admin: number
    productos?: ProductosUncheckedCreateNestedManyWithoutCategoriasInput
  }

  export type CategoriasUpdateInput = {
    Nombre?: StringFieldUpdateOperationsInput | string
    productos?: ProductosUpdateManyWithoutCategoriasNestedInput
    catalogos?: CatalogosUpdateOneRequiredWithoutCategoriasNestedInput
    Admins?: AdminUpdateOneRequiredWithoutCategoriasNestedInput
  }

  export type CategoriasUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    Nombre?: StringFieldUpdateOperationsInput | string
    id_Cat?: IntFieldUpdateOperationsInput | number
    id_Admin?: IntFieldUpdateOperationsInput | number
    productos?: ProductosUncheckedUpdateManyWithoutCategoriasNestedInput
  }

  export type CategoriasCreateManyInput = {
    id?: number
    Nombre: string
    id_Cat: number
    id_Admin: number
  }

  export type CategoriasUpdateManyMutationInput = {
    Nombre?: StringFieldUpdateOperationsInput | string
  }

  export type CategoriasUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    Nombre?: StringFieldUpdateOperationsInput | string
    id_Cat?: IntFieldUpdateOperationsInput | number
    id_Admin?: IntFieldUpdateOperationsInput | number
  }

  export type AdminCreateInput = {
    Email: string
    UserName: string
    Password: string
    celular: string
    roles: RolesCreateNestedOneWithoutAdminsInput
    catalogos?: CatalogosCreateNestedManyWithoutAdminsInput
    categorias?: CategoriasCreateNestedManyWithoutAdminsInput
  }

  export type AdminUncheckedCreateInput = {
    id?: number
    Email: string
    UserName: string
    Password: string
    celular: string
    id_Rol: number
    catalogos?: CatalogosUncheckedCreateNestedManyWithoutAdminsInput
    categorias?: CategoriasUncheckedCreateNestedManyWithoutAdminsInput
  }

  export type AdminUpdateInput = {
    Email?: StringFieldUpdateOperationsInput | string
    UserName?: StringFieldUpdateOperationsInput | string
    Password?: StringFieldUpdateOperationsInput | string
    celular?: StringFieldUpdateOperationsInput | string
    roles?: RolesUpdateOneRequiredWithoutAdminsNestedInput
    catalogos?: CatalogosUpdateManyWithoutAdminsNestedInput
    categorias?: CategoriasUpdateManyWithoutAdminsNestedInput
  }

  export type AdminUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    Email?: StringFieldUpdateOperationsInput | string
    UserName?: StringFieldUpdateOperationsInput | string
    Password?: StringFieldUpdateOperationsInput | string
    celular?: StringFieldUpdateOperationsInput | string
    id_Rol?: IntFieldUpdateOperationsInput | number
    catalogos?: CatalogosUncheckedUpdateManyWithoutAdminsNestedInput
    categorias?: CategoriasUncheckedUpdateManyWithoutAdminsNestedInput
  }

  export type AdminCreateManyInput = {
    id?: number
    Email: string
    UserName: string
    Password: string
    celular: string
    id_Rol: number
  }

  export type AdminUpdateManyMutationInput = {
    Email?: StringFieldUpdateOperationsInput | string
    UserName?: StringFieldUpdateOperationsInput | string
    Password?: StringFieldUpdateOperationsInput | string
    celular?: StringFieldUpdateOperationsInput | string
  }

  export type AdminUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    Email?: StringFieldUpdateOperationsInput | string
    UserName?: StringFieldUpdateOperationsInput | string
    Password?: StringFieldUpdateOperationsInput | string
    celular?: StringFieldUpdateOperationsInput | string
    id_Rol?: IntFieldUpdateOperationsInput | number
  }

  export type ProductosCreateInput = {
    Nombre: string
    Descripcion: string
    Disponibilidad: boolean
    Precio: string
    Presentacion: string
    Imagen: string
    categorias: CategoriasCreateNestedOneWithoutProductosInput
    usuarios: UsuarioCreateNestedOneWithoutProductosInput
  }

  export type ProductosUncheckedCreateInput = {
    id?: number
    Nombre: string
    Descripcion: string
    Disponibilidad: boolean
    Precio: string
    Presentacion: string
    Imagen: string
    id_Categoria: number
    id_Usuario: number
  }

  export type ProductosUpdateInput = {
    Nombre?: StringFieldUpdateOperationsInput | string
    Descripcion?: StringFieldUpdateOperationsInput | string
    Disponibilidad?: BoolFieldUpdateOperationsInput | boolean
    Precio?: StringFieldUpdateOperationsInput | string
    Presentacion?: StringFieldUpdateOperationsInput | string
    Imagen?: StringFieldUpdateOperationsInput | string
    categorias?: CategoriasUpdateOneRequiredWithoutProductosNestedInput
    usuarios?: UsuarioUpdateOneRequiredWithoutProductosNestedInput
  }

  export type ProductosUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    Nombre?: StringFieldUpdateOperationsInput | string
    Descripcion?: StringFieldUpdateOperationsInput | string
    Disponibilidad?: BoolFieldUpdateOperationsInput | boolean
    Precio?: StringFieldUpdateOperationsInput | string
    Presentacion?: StringFieldUpdateOperationsInput | string
    Imagen?: StringFieldUpdateOperationsInput | string
    id_Categoria?: IntFieldUpdateOperationsInput | number
    id_Usuario?: IntFieldUpdateOperationsInput | number
  }

  export type ProductosCreateManyInput = {
    id?: number
    Nombre: string
    Descripcion: string
    Disponibilidad: boolean
    Precio: string
    Presentacion: string
    Imagen: string
    id_Categoria: number
    id_Usuario: number
  }

  export type ProductosUpdateManyMutationInput = {
    Nombre?: StringFieldUpdateOperationsInput | string
    Descripcion?: StringFieldUpdateOperationsInput | string
    Disponibilidad?: BoolFieldUpdateOperationsInput | boolean
    Precio?: StringFieldUpdateOperationsInput | string
    Presentacion?: StringFieldUpdateOperationsInput | string
    Imagen?: StringFieldUpdateOperationsInput | string
  }

  export type ProductosUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    Nombre?: StringFieldUpdateOperationsInput | string
    Descripcion?: StringFieldUpdateOperationsInput | string
    Disponibilidad?: BoolFieldUpdateOperationsInput | boolean
    Precio?: StringFieldUpdateOperationsInput | string
    Presentacion?: StringFieldUpdateOperationsInput | string
    Imagen?: StringFieldUpdateOperationsInput | string
    id_Categoria?: IntFieldUpdateOperationsInput | number
    id_Usuario?: IntFieldUpdateOperationsInput | number
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type RolesRelationFilter = {
    is?: RolesWhereInput
    isNot?: RolesWhereInput
  }

  export type ProductosListRelationFilter = {
    every?: ProductosWhereInput
    some?: ProductosWhereInput
    none?: ProductosWhereInput
  }

  export type ProductosOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UsuarioCountOrderByAggregateInput = {
    id?: SortOrder
    Nombres?: SortOrder
    Apellidos?: SortOrder
    UserName?: SortOrder
    Password?: SortOrder
    Email?: SortOrder
    Celular?: SortOrder
    Imagen?: SortOrder
    DateCreated?: SortOrder
    id_Rol?: SortOrder
  }

  export type UsuarioAvgOrderByAggregateInput = {
    id?: SortOrder
    id_Rol?: SortOrder
  }

  export type UsuarioMaxOrderByAggregateInput = {
    id?: SortOrder
    Nombres?: SortOrder
    Apellidos?: SortOrder
    UserName?: SortOrder
    Password?: SortOrder
    Email?: SortOrder
    Celular?: SortOrder
    Imagen?: SortOrder
    DateCreated?: SortOrder
    id_Rol?: SortOrder
  }

  export type UsuarioMinOrderByAggregateInput = {
    id?: SortOrder
    Nombres?: SortOrder
    Apellidos?: SortOrder
    UserName?: SortOrder
    Password?: SortOrder
    Email?: SortOrder
    Celular?: SortOrder
    Imagen?: SortOrder
    DateCreated?: SortOrder
    id_Rol?: SortOrder
  }

  export type UsuarioSumOrderByAggregateInput = {
    id?: SortOrder
    id_Rol?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type UsuarioListRelationFilter = {
    every?: UsuarioWhereInput
    some?: UsuarioWhereInput
    none?: UsuarioWhereInput
  }

  export type AdminListRelationFilter = {
    every?: AdminWhereInput
    some?: AdminWhereInput
    none?: AdminWhereInput
  }

  export type UsuarioOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AdminOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type RolesCountOrderByAggregateInput = {
    id?: SortOrder
    Nombre?: SortOrder
  }

  export type RolesAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type RolesMaxOrderByAggregateInput = {
    id?: SortOrder
    Nombre?: SortOrder
  }

  export type RolesMinOrderByAggregateInput = {
    id?: SortOrder
    Nombre?: SortOrder
  }

  export type RolesSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type CategoriasListRelationFilter = {
    every?: CategoriasWhereInput
    some?: CategoriasWhereInput
    none?: CategoriasWhereInput
  }

  export type AdminRelationFilter = {
    is?: AdminWhereInput
    isNot?: AdminWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type CategoriasOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CatalogosCountOrderByAggregateInput = {
    id?: SortOrder
    Nombre?: SortOrder
    Descripcion?: SortOrder
    id_Admin?: SortOrder
  }

  export type CatalogosAvgOrderByAggregateInput = {
    id?: SortOrder
    id_Admin?: SortOrder
  }

  export type CatalogosMaxOrderByAggregateInput = {
    id?: SortOrder
    Nombre?: SortOrder
    Descripcion?: SortOrder
    id_Admin?: SortOrder
  }

  export type CatalogosMinOrderByAggregateInput = {
    id?: SortOrder
    Nombre?: SortOrder
    Descripcion?: SortOrder
    id_Admin?: SortOrder
  }

  export type CatalogosSumOrderByAggregateInput = {
    id?: SortOrder
    id_Admin?: SortOrder
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type CatalogosRelationFilter = {
    is?: CatalogosWhereInput
    isNot?: CatalogosWhereInput
  }

  export type CategoriasCountOrderByAggregateInput = {
    id?: SortOrder
    Nombre?: SortOrder
    id_Cat?: SortOrder
    id_Admin?: SortOrder
  }

  export type CategoriasAvgOrderByAggregateInput = {
    id?: SortOrder
    id_Cat?: SortOrder
    id_Admin?: SortOrder
  }

  export type CategoriasMaxOrderByAggregateInput = {
    id?: SortOrder
    Nombre?: SortOrder
    id_Cat?: SortOrder
    id_Admin?: SortOrder
  }

  export type CategoriasMinOrderByAggregateInput = {
    id?: SortOrder
    Nombre?: SortOrder
    id_Cat?: SortOrder
    id_Admin?: SortOrder
  }

  export type CategoriasSumOrderByAggregateInput = {
    id?: SortOrder
    id_Cat?: SortOrder
    id_Admin?: SortOrder
  }

  export type CatalogosListRelationFilter = {
    every?: CatalogosWhereInput
    some?: CatalogosWhereInput
    none?: CatalogosWhereInput
  }

  export type CatalogosOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AdminCountOrderByAggregateInput = {
    id?: SortOrder
    Email?: SortOrder
    UserName?: SortOrder
    Password?: SortOrder
    celular?: SortOrder
    id_Rol?: SortOrder
  }

  export type AdminAvgOrderByAggregateInput = {
    id?: SortOrder
    id_Rol?: SortOrder
  }

  export type AdminMaxOrderByAggregateInput = {
    id?: SortOrder
    Email?: SortOrder
    UserName?: SortOrder
    Password?: SortOrder
    celular?: SortOrder
    id_Rol?: SortOrder
  }

  export type AdminMinOrderByAggregateInput = {
    id?: SortOrder
    Email?: SortOrder
    UserName?: SortOrder
    Password?: SortOrder
    celular?: SortOrder
    id_Rol?: SortOrder
  }

  export type AdminSumOrderByAggregateInput = {
    id?: SortOrder
    id_Rol?: SortOrder
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type CategoriasRelationFilter = {
    is?: CategoriasWhereInput
    isNot?: CategoriasWhereInput
  }

  export type UsuarioRelationFilter = {
    is?: UsuarioWhereInput
    isNot?: UsuarioWhereInput
  }

  export type ProductosCountOrderByAggregateInput = {
    id?: SortOrder
    Nombre?: SortOrder
    Descripcion?: SortOrder
    Disponibilidad?: SortOrder
    Precio?: SortOrder
    Presentacion?: SortOrder
    Imagen?: SortOrder
    id_Categoria?: SortOrder
    id_Usuario?: SortOrder
  }

  export type ProductosAvgOrderByAggregateInput = {
    id?: SortOrder
    id_Categoria?: SortOrder
    id_Usuario?: SortOrder
  }

  export type ProductosMaxOrderByAggregateInput = {
    id?: SortOrder
    Nombre?: SortOrder
    Descripcion?: SortOrder
    Disponibilidad?: SortOrder
    Precio?: SortOrder
    Presentacion?: SortOrder
    Imagen?: SortOrder
    id_Categoria?: SortOrder
    id_Usuario?: SortOrder
  }

  export type ProductosMinOrderByAggregateInput = {
    id?: SortOrder
    Nombre?: SortOrder
    Descripcion?: SortOrder
    Disponibilidad?: SortOrder
    Precio?: SortOrder
    Presentacion?: SortOrder
    Imagen?: SortOrder
    id_Categoria?: SortOrder
    id_Usuario?: SortOrder
  }

  export type ProductosSumOrderByAggregateInput = {
    id?: SortOrder
    id_Categoria?: SortOrder
    id_Usuario?: SortOrder
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type RolesCreateNestedOneWithoutUsuariosInput = {
    create?: XOR<RolesCreateWithoutUsuariosInput, RolesUncheckedCreateWithoutUsuariosInput>
    connectOrCreate?: RolesCreateOrConnectWithoutUsuariosInput
    connect?: RolesWhereUniqueInput
  }

  export type ProductosCreateNestedManyWithoutUsuariosInput = {
    create?: XOR<ProductosCreateWithoutUsuariosInput, ProductosUncheckedCreateWithoutUsuariosInput> | ProductosCreateWithoutUsuariosInput[] | ProductosUncheckedCreateWithoutUsuariosInput[]
    connectOrCreate?: ProductosCreateOrConnectWithoutUsuariosInput | ProductosCreateOrConnectWithoutUsuariosInput[]
    createMany?: ProductosCreateManyUsuariosInputEnvelope
    connect?: ProductosWhereUniqueInput | ProductosWhereUniqueInput[]
  }

  export type ProductosUncheckedCreateNestedManyWithoutUsuariosInput = {
    create?: XOR<ProductosCreateWithoutUsuariosInput, ProductosUncheckedCreateWithoutUsuariosInput> | ProductosCreateWithoutUsuariosInput[] | ProductosUncheckedCreateWithoutUsuariosInput[]
    connectOrCreate?: ProductosCreateOrConnectWithoutUsuariosInput | ProductosCreateOrConnectWithoutUsuariosInput[]
    createMany?: ProductosCreateManyUsuariosInputEnvelope
    connect?: ProductosWhereUniqueInput | ProductosWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type RolesUpdateOneRequiredWithoutUsuariosNestedInput = {
    create?: XOR<RolesCreateWithoutUsuariosInput, RolesUncheckedCreateWithoutUsuariosInput>
    connectOrCreate?: RolesCreateOrConnectWithoutUsuariosInput
    upsert?: RolesUpsertWithoutUsuariosInput
    connect?: RolesWhereUniqueInput
    update?: XOR<XOR<RolesUpdateToOneWithWhereWithoutUsuariosInput, RolesUpdateWithoutUsuariosInput>, RolesUncheckedUpdateWithoutUsuariosInput>
  }

  export type ProductosUpdateManyWithoutUsuariosNestedInput = {
    create?: XOR<ProductosCreateWithoutUsuariosInput, ProductosUncheckedCreateWithoutUsuariosInput> | ProductosCreateWithoutUsuariosInput[] | ProductosUncheckedCreateWithoutUsuariosInput[]
    connectOrCreate?: ProductosCreateOrConnectWithoutUsuariosInput | ProductosCreateOrConnectWithoutUsuariosInput[]
    upsert?: ProductosUpsertWithWhereUniqueWithoutUsuariosInput | ProductosUpsertWithWhereUniqueWithoutUsuariosInput[]
    createMany?: ProductosCreateManyUsuariosInputEnvelope
    set?: ProductosWhereUniqueInput | ProductosWhereUniqueInput[]
    disconnect?: ProductosWhereUniqueInput | ProductosWhereUniqueInput[]
    delete?: ProductosWhereUniqueInput | ProductosWhereUniqueInput[]
    connect?: ProductosWhereUniqueInput | ProductosWhereUniqueInput[]
    update?: ProductosUpdateWithWhereUniqueWithoutUsuariosInput | ProductosUpdateWithWhereUniqueWithoutUsuariosInput[]
    updateMany?: ProductosUpdateManyWithWhereWithoutUsuariosInput | ProductosUpdateManyWithWhereWithoutUsuariosInput[]
    deleteMany?: ProductosScalarWhereInput | ProductosScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type ProductosUncheckedUpdateManyWithoutUsuariosNestedInput = {
    create?: XOR<ProductosCreateWithoutUsuariosInput, ProductosUncheckedCreateWithoutUsuariosInput> | ProductosCreateWithoutUsuariosInput[] | ProductosUncheckedCreateWithoutUsuariosInput[]
    connectOrCreate?: ProductosCreateOrConnectWithoutUsuariosInput | ProductosCreateOrConnectWithoutUsuariosInput[]
    upsert?: ProductosUpsertWithWhereUniqueWithoutUsuariosInput | ProductosUpsertWithWhereUniqueWithoutUsuariosInput[]
    createMany?: ProductosCreateManyUsuariosInputEnvelope
    set?: ProductosWhereUniqueInput | ProductosWhereUniqueInput[]
    disconnect?: ProductosWhereUniqueInput | ProductosWhereUniqueInput[]
    delete?: ProductosWhereUniqueInput | ProductosWhereUniqueInput[]
    connect?: ProductosWhereUniqueInput | ProductosWhereUniqueInput[]
    update?: ProductosUpdateWithWhereUniqueWithoutUsuariosInput | ProductosUpdateWithWhereUniqueWithoutUsuariosInput[]
    updateMany?: ProductosUpdateManyWithWhereWithoutUsuariosInput | ProductosUpdateManyWithWhereWithoutUsuariosInput[]
    deleteMany?: ProductosScalarWhereInput | ProductosScalarWhereInput[]
  }

  export type UsuarioCreateNestedManyWithoutRolesInput = {
    create?: XOR<UsuarioCreateWithoutRolesInput, UsuarioUncheckedCreateWithoutRolesInput> | UsuarioCreateWithoutRolesInput[] | UsuarioUncheckedCreateWithoutRolesInput[]
    connectOrCreate?: UsuarioCreateOrConnectWithoutRolesInput | UsuarioCreateOrConnectWithoutRolesInput[]
    createMany?: UsuarioCreateManyRolesInputEnvelope
    connect?: UsuarioWhereUniqueInput | UsuarioWhereUniqueInput[]
  }

  export type AdminCreateNestedManyWithoutRolesInput = {
    create?: XOR<AdminCreateWithoutRolesInput, AdminUncheckedCreateWithoutRolesInput> | AdminCreateWithoutRolesInput[] | AdminUncheckedCreateWithoutRolesInput[]
    connectOrCreate?: AdminCreateOrConnectWithoutRolesInput | AdminCreateOrConnectWithoutRolesInput[]
    createMany?: AdminCreateManyRolesInputEnvelope
    connect?: AdminWhereUniqueInput | AdminWhereUniqueInput[]
  }

  export type UsuarioUncheckedCreateNestedManyWithoutRolesInput = {
    create?: XOR<UsuarioCreateWithoutRolesInput, UsuarioUncheckedCreateWithoutRolesInput> | UsuarioCreateWithoutRolesInput[] | UsuarioUncheckedCreateWithoutRolesInput[]
    connectOrCreate?: UsuarioCreateOrConnectWithoutRolesInput | UsuarioCreateOrConnectWithoutRolesInput[]
    createMany?: UsuarioCreateManyRolesInputEnvelope
    connect?: UsuarioWhereUniqueInput | UsuarioWhereUniqueInput[]
  }

  export type AdminUncheckedCreateNestedManyWithoutRolesInput = {
    create?: XOR<AdminCreateWithoutRolesInput, AdminUncheckedCreateWithoutRolesInput> | AdminCreateWithoutRolesInput[] | AdminUncheckedCreateWithoutRolesInput[]
    connectOrCreate?: AdminCreateOrConnectWithoutRolesInput | AdminCreateOrConnectWithoutRolesInput[]
    createMany?: AdminCreateManyRolesInputEnvelope
    connect?: AdminWhereUniqueInput | AdminWhereUniqueInput[]
  }

  export type UsuarioUpdateManyWithoutRolesNestedInput = {
    create?: XOR<UsuarioCreateWithoutRolesInput, UsuarioUncheckedCreateWithoutRolesInput> | UsuarioCreateWithoutRolesInput[] | UsuarioUncheckedCreateWithoutRolesInput[]
    connectOrCreate?: UsuarioCreateOrConnectWithoutRolesInput | UsuarioCreateOrConnectWithoutRolesInput[]
    upsert?: UsuarioUpsertWithWhereUniqueWithoutRolesInput | UsuarioUpsertWithWhereUniqueWithoutRolesInput[]
    createMany?: UsuarioCreateManyRolesInputEnvelope
    set?: UsuarioWhereUniqueInput | UsuarioWhereUniqueInput[]
    disconnect?: UsuarioWhereUniqueInput | UsuarioWhereUniqueInput[]
    delete?: UsuarioWhereUniqueInput | UsuarioWhereUniqueInput[]
    connect?: UsuarioWhereUniqueInput | UsuarioWhereUniqueInput[]
    update?: UsuarioUpdateWithWhereUniqueWithoutRolesInput | UsuarioUpdateWithWhereUniqueWithoutRolesInput[]
    updateMany?: UsuarioUpdateManyWithWhereWithoutRolesInput | UsuarioUpdateManyWithWhereWithoutRolesInput[]
    deleteMany?: UsuarioScalarWhereInput | UsuarioScalarWhereInput[]
  }

  export type AdminUpdateManyWithoutRolesNestedInput = {
    create?: XOR<AdminCreateWithoutRolesInput, AdminUncheckedCreateWithoutRolesInput> | AdminCreateWithoutRolesInput[] | AdminUncheckedCreateWithoutRolesInput[]
    connectOrCreate?: AdminCreateOrConnectWithoutRolesInput | AdminCreateOrConnectWithoutRolesInput[]
    upsert?: AdminUpsertWithWhereUniqueWithoutRolesInput | AdminUpsertWithWhereUniqueWithoutRolesInput[]
    createMany?: AdminCreateManyRolesInputEnvelope
    set?: AdminWhereUniqueInput | AdminWhereUniqueInput[]
    disconnect?: AdminWhereUniqueInput | AdminWhereUniqueInput[]
    delete?: AdminWhereUniqueInput | AdminWhereUniqueInput[]
    connect?: AdminWhereUniqueInput | AdminWhereUniqueInput[]
    update?: AdminUpdateWithWhereUniqueWithoutRolesInput | AdminUpdateWithWhereUniqueWithoutRolesInput[]
    updateMany?: AdminUpdateManyWithWhereWithoutRolesInput | AdminUpdateManyWithWhereWithoutRolesInput[]
    deleteMany?: AdminScalarWhereInput | AdminScalarWhereInput[]
  }

  export type UsuarioUncheckedUpdateManyWithoutRolesNestedInput = {
    create?: XOR<UsuarioCreateWithoutRolesInput, UsuarioUncheckedCreateWithoutRolesInput> | UsuarioCreateWithoutRolesInput[] | UsuarioUncheckedCreateWithoutRolesInput[]
    connectOrCreate?: UsuarioCreateOrConnectWithoutRolesInput | UsuarioCreateOrConnectWithoutRolesInput[]
    upsert?: UsuarioUpsertWithWhereUniqueWithoutRolesInput | UsuarioUpsertWithWhereUniqueWithoutRolesInput[]
    createMany?: UsuarioCreateManyRolesInputEnvelope
    set?: UsuarioWhereUniqueInput | UsuarioWhereUniqueInput[]
    disconnect?: UsuarioWhereUniqueInput | UsuarioWhereUniqueInput[]
    delete?: UsuarioWhereUniqueInput | UsuarioWhereUniqueInput[]
    connect?: UsuarioWhereUniqueInput | UsuarioWhereUniqueInput[]
    update?: UsuarioUpdateWithWhereUniqueWithoutRolesInput | UsuarioUpdateWithWhereUniqueWithoutRolesInput[]
    updateMany?: UsuarioUpdateManyWithWhereWithoutRolesInput | UsuarioUpdateManyWithWhereWithoutRolesInput[]
    deleteMany?: UsuarioScalarWhereInput | UsuarioScalarWhereInput[]
  }

  export type AdminUncheckedUpdateManyWithoutRolesNestedInput = {
    create?: XOR<AdminCreateWithoutRolesInput, AdminUncheckedCreateWithoutRolesInput> | AdminCreateWithoutRolesInput[] | AdminUncheckedCreateWithoutRolesInput[]
    connectOrCreate?: AdminCreateOrConnectWithoutRolesInput | AdminCreateOrConnectWithoutRolesInput[]
    upsert?: AdminUpsertWithWhereUniqueWithoutRolesInput | AdminUpsertWithWhereUniqueWithoutRolesInput[]
    createMany?: AdminCreateManyRolesInputEnvelope
    set?: AdminWhereUniqueInput | AdminWhereUniqueInput[]
    disconnect?: AdminWhereUniqueInput | AdminWhereUniqueInput[]
    delete?: AdminWhereUniqueInput | AdminWhereUniqueInput[]
    connect?: AdminWhereUniqueInput | AdminWhereUniqueInput[]
    update?: AdminUpdateWithWhereUniqueWithoutRolesInput | AdminUpdateWithWhereUniqueWithoutRolesInput[]
    updateMany?: AdminUpdateManyWithWhereWithoutRolesInput | AdminUpdateManyWithWhereWithoutRolesInput[]
    deleteMany?: AdminScalarWhereInput | AdminScalarWhereInput[]
  }

  export type CategoriasCreateNestedManyWithoutCatalogosInput = {
    create?: XOR<CategoriasCreateWithoutCatalogosInput, CategoriasUncheckedCreateWithoutCatalogosInput> | CategoriasCreateWithoutCatalogosInput[] | CategoriasUncheckedCreateWithoutCatalogosInput[]
    connectOrCreate?: CategoriasCreateOrConnectWithoutCatalogosInput | CategoriasCreateOrConnectWithoutCatalogosInput[]
    createMany?: CategoriasCreateManyCatalogosInputEnvelope
    connect?: CategoriasWhereUniqueInput | CategoriasWhereUniqueInput[]
  }

  export type AdminCreateNestedOneWithoutCatalogosInput = {
    create?: XOR<AdminCreateWithoutCatalogosInput, AdminUncheckedCreateWithoutCatalogosInput>
    connectOrCreate?: AdminCreateOrConnectWithoutCatalogosInput
    connect?: AdminWhereUniqueInput
  }

  export type CategoriasUncheckedCreateNestedManyWithoutCatalogosInput = {
    create?: XOR<CategoriasCreateWithoutCatalogosInput, CategoriasUncheckedCreateWithoutCatalogosInput> | CategoriasCreateWithoutCatalogosInput[] | CategoriasUncheckedCreateWithoutCatalogosInput[]
    connectOrCreate?: CategoriasCreateOrConnectWithoutCatalogosInput | CategoriasCreateOrConnectWithoutCatalogosInput[]
    createMany?: CategoriasCreateManyCatalogosInputEnvelope
    connect?: CategoriasWhereUniqueInput | CategoriasWhereUniqueInput[]
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type CategoriasUpdateManyWithoutCatalogosNestedInput = {
    create?: XOR<CategoriasCreateWithoutCatalogosInput, CategoriasUncheckedCreateWithoutCatalogosInput> | CategoriasCreateWithoutCatalogosInput[] | CategoriasUncheckedCreateWithoutCatalogosInput[]
    connectOrCreate?: CategoriasCreateOrConnectWithoutCatalogosInput | CategoriasCreateOrConnectWithoutCatalogosInput[]
    upsert?: CategoriasUpsertWithWhereUniqueWithoutCatalogosInput | CategoriasUpsertWithWhereUniqueWithoutCatalogosInput[]
    createMany?: CategoriasCreateManyCatalogosInputEnvelope
    set?: CategoriasWhereUniqueInput | CategoriasWhereUniqueInput[]
    disconnect?: CategoriasWhereUniqueInput | CategoriasWhereUniqueInput[]
    delete?: CategoriasWhereUniqueInput | CategoriasWhereUniqueInput[]
    connect?: CategoriasWhereUniqueInput | CategoriasWhereUniqueInput[]
    update?: CategoriasUpdateWithWhereUniqueWithoutCatalogosInput | CategoriasUpdateWithWhereUniqueWithoutCatalogosInput[]
    updateMany?: CategoriasUpdateManyWithWhereWithoutCatalogosInput | CategoriasUpdateManyWithWhereWithoutCatalogosInput[]
    deleteMany?: CategoriasScalarWhereInput | CategoriasScalarWhereInput[]
  }

  export type AdminUpdateOneRequiredWithoutCatalogosNestedInput = {
    create?: XOR<AdminCreateWithoutCatalogosInput, AdminUncheckedCreateWithoutCatalogosInput>
    connectOrCreate?: AdminCreateOrConnectWithoutCatalogosInput
    upsert?: AdminUpsertWithoutCatalogosInput
    connect?: AdminWhereUniqueInput
    update?: XOR<XOR<AdminUpdateToOneWithWhereWithoutCatalogosInput, AdminUpdateWithoutCatalogosInput>, AdminUncheckedUpdateWithoutCatalogosInput>
  }

  export type CategoriasUncheckedUpdateManyWithoutCatalogosNestedInput = {
    create?: XOR<CategoriasCreateWithoutCatalogosInput, CategoriasUncheckedCreateWithoutCatalogosInput> | CategoriasCreateWithoutCatalogosInput[] | CategoriasUncheckedCreateWithoutCatalogosInput[]
    connectOrCreate?: CategoriasCreateOrConnectWithoutCatalogosInput | CategoriasCreateOrConnectWithoutCatalogosInput[]
    upsert?: CategoriasUpsertWithWhereUniqueWithoutCatalogosInput | CategoriasUpsertWithWhereUniqueWithoutCatalogosInput[]
    createMany?: CategoriasCreateManyCatalogosInputEnvelope
    set?: CategoriasWhereUniqueInput | CategoriasWhereUniqueInput[]
    disconnect?: CategoriasWhereUniqueInput | CategoriasWhereUniqueInput[]
    delete?: CategoriasWhereUniqueInput | CategoriasWhereUniqueInput[]
    connect?: CategoriasWhereUniqueInput | CategoriasWhereUniqueInput[]
    update?: CategoriasUpdateWithWhereUniqueWithoutCatalogosInput | CategoriasUpdateWithWhereUniqueWithoutCatalogosInput[]
    updateMany?: CategoriasUpdateManyWithWhereWithoutCatalogosInput | CategoriasUpdateManyWithWhereWithoutCatalogosInput[]
    deleteMany?: CategoriasScalarWhereInput | CategoriasScalarWhereInput[]
  }

  export type ProductosCreateNestedManyWithoutCategoriasInput = {
    create?: XOR<ProductosCreateWithoutCategoriasInput, ProductosUncheckedCreateWithoutCategoriasInput> | ProductosCreateWithoutCategoriasInput[] | ProductosUncheckedCreateWithoutCategoriasInput[]
    connectOrCreate?: ProductosCreateOrConnectWithoutCategoriasInput | ProductosCreateOrConnectWithoutCategoriasInput[]
    createMany?: ProductosCreateManyCategoriasInputEnvelope
    connect?: ProductosWhereUniqueInput | ProductosWhereUniqueInput[]
  }

  export type CatalogosCreateNestedOneWithoutCategoriasInput = {
    create?: XOR<CatalogosCreateWithoutCategoriasInput, CatalogosUncheckedCreateWithoutCategoriasInput>
    connectOrCreate?: CatalogosCreateOrConnectWithoutCategoriasInput
    connect?: CatalogosWhereUniqueInput
  }

  export type AdminCreateNestedOneWithoutCategoriasInput = {
    create?: XOR<AdminCreateWithoutCategoriasInput, AdminUncheckedCreateWithoutCategoriasInput>
    connectOrCreate?: AdminCreateOrConnectWithoutCategoriasInput
    connect?: AdminWhereUniqueInput
  }

  export type ProductosUncheckedCreateNestedManyWithoutCategoriasInput = {
    create?: XOR<ProductosCreateWithoutCategoriasInput, ProductosUncheckedCreateWithoutCategoriasInput> | ProductosCreateWithoutCategoriasInput[] | ProductosUncheckedCreateWithoutCategoriasInput[]
    connectOrCreate?: ProductosCreateOrConnectWithoutCategoriasInput | ProductosCreateOrConnectWithoutCategoriasInput[]
    createMany?: ProductosCreateManyCategoriasInputEnvelope
    connect?: ProductosWhereUniqueInput | ProductosWhereUniqueInput[]
  }

  export type ProductosUpdateManyWithoutCategoriasNestedInput = {
    create?: XOR<ProductosCreateWithoutCategoriasInput, ProductosUncheckedCreateWithoutCategoriasInput> | ProductosCreateWithoutCategoriasInput[] | ProductosUncheckedCreateWithoutCategoriasInput[]
    connectOrCreate?: ProductosCreateOrConnectWithoutCategoriasInput | ProductosCreateOrConnectWithoutCategoriasInput[]
    upsert?: ProductosUpsertWithWhereUniqueWithoutCategoriasInput | ProductosUpsertWithWhereUniqueWithoutCategoriasInput[]
    createMany?: ProductosCreateManyCategoriasInputEnvelope
    set?: ProductosWhereUniqueInput | ProductosWhereUniqueInput[]
    disconnect?: ProductosWhereUniqueInput | ProductosWhereUniqueInput[]
    delete?: ProductosWhereUniqueInput | ProductosWhereUniqueInput[]
    connect?: ProductosWhereUniqueInput | ProductosWhereUniqueInput[]
    update?: ProductosUpdateWithWhereUniqueWithoutCategoriasInput | ProductosUpdateWithWhereUniqueWithoutCategoriasInput[]
    updateMany?: ProductosUpdateManyWithWhereWithoutCategoriasInput | ProductosUpdateManyWithWhereWithoutCategoriasInput[]
    deleteMany?: ProductosScalarWhereInput | ProductosScalarWhereInput[]
  }

  export type CatalogosUpdateOneRequiredWithoutCategoriasNestedInput = {
    create?: XOR<CatalogosCreateWithoutCategoriasInput, CatalogosUncheckedCreateWithoutCategoriasInput>
    connectOrCreate?: CatalogosCreateOrConnectWithoutCategoriasInput
    upsert?: CatalogosUpsertWithoutCategoriasInput
    connect?: CatalogosWhereUniqueInput
    update?: XOR<XOR<CatalogosUpdateToOneWithWhereWithoutCategoriasInput, CatalogosUpdateWithoutCategoriasInput>, CatalogosUncheckedUpdateWithoutCategoriasInput>
  }

  export type AdminUpdateOneRequiredWithoutCategoriasNestedInput = {
    create?: XOR<AdminCreateWithoutCategoriasInput, AdminUncheckedCreateWithoutCategoriasInput>
    connectOrCreate?: AdminCreateOrConnectWithoutCategoriasInput
    upsert?: AdminUpsertWithoutCategoriasInput
    connect?: AdminWhereUniqueInput
    update?: XOR<XOR<AdminUpdateToOneWithWhereWithoutCategoriasInput, AdminUpdateWithoutCategoriasInput>, AdminUncheckedUpdateWithoutCategoriasInput>
  }

  export type ProductosUncheckedUpdateManyWithoutCategoriasNestedInput = {
    create?: XOR<ProductosCreateWithoutCategoriasInput, ProductosUncheckedCreateWithoutCategoriasInput> | ProductosCreateWithoutCategoriasInput[] | ProductosUncheckedCreateWithoutCategoriasInput[]
    connectOrCreate?: ProductosCreateOrConnectWithoutCategoriasInput | ProductosCreateOrConnectWithoutCategoriasInput[]
    upsert?: ProductosUpsertWithWhereUniqueWithoutCategoriasInput | ProductosUpsertWithWhereUniqueWithoutCategoriasInput[]
    createMany?: ProductosCreateManyCategoriasInputEnvelope
    set?: ProductosWhereUniqueInput | ProductosWhereUniqueInput[]
    disconnect?: ProductosWhereUniqueInput | ProductosWhereUniqueInput[]
    delete?: ProductosWhereUniqueInput | ProductosWhereUniqueInput[]
    connect?: ProductosWhereUniqueInput | ProductosWhereUniqueInput[]
    update?: ProductosUpdateWithWhereUniqueWithoutCategoriasInput | ProductosUpdateWithWhereUniqueWithoutCategoriasInput[]
    updateMany?: ProductosUpdateManyWithWhereWithoutCategoriasInput | ProductosUpdateManyWithWhereWithoutCategoriasInput[]
    deleteMany?: ProductosScalarWhereInput | ProductosScalarWhereInput[]
  }

  export type RolesCreateNestedOneWithoutAdminsInput = {
    create?: XOR<RolesCreateWithoutAdminsInput, RolesUncheckedCreateWithoutAdminsInput>
    connectOrCreate?: RolesCreateOrConnectWithoutAdminsInput
    connect?: RolesWhereUniqueInput
  }

  export type CatalogosCreateNestedManyWithoutAdminsInput = {
    create?: XOR<CatalogosCreateWithoutAdminsInput, CatalogosUncheckedCreateWithoutAdminsInput> | CatalogosCreateWithoutAdminsInput[] | CatalogosUncheckedCreateWithoutAdminsInput[]
    connectOrCreate?: CatalogosCreateOrConnectWithoutAdminsInput | CatalogosCreateOrConnectWithoutAdminsInput[]
    createMany?: CatalogosCreateManyAdminsInputEnvelope
    connect?: CatalogosWhereUniqueInput | CatalogosWhereUniqueInput[]
  }

  export type CategoriasCreateNestedManyWithoutAdminsInput = {
    create?: XOR<CategoriasCreateWithoutAdminsInput, CategoriasUncheckedCreateWithoutAdminsInput> | CategoriasCreateWithoutAdminsInput[] | CategoriasUncheckedCreateWithoutAdminsInput[]
    connectOrCreate?: CategoriasCreateOrConnectWithoutAdminsInput | CategoriasCreateOrConnectWithoutAdminsInput[]
    createMany?: CategoriasCreateManyAdminsInputEnvelope
    connect?: CategoriasWhereUniqueInput | CategoriasWhereUniqueInput[]
  }

  export type CatalogosUncheckedCreateNestedManyWithoutAdminsInput = {
    create?: XOR<CatalogosCreateWithoutAdminsInput, CatalogosUncheckedCreateWithoutAdminsInput> | CatalogosCreateWithoutAdminsInput[] | CatalogosUncheckedCreateWithoutAdminsInput[]
    connectOrCreate?: CatalogosCreateOrConnectWithoutAdminsInput | CatalogosCreateOrConnectWithoutAdminsInput[]
    createMany?: CatalogosCreateManyAdminsInputEnvelope
    connect?: CatalogosWhereUniqueInput | CatalogosWhereUniqueInput[]
  }

  export type CategoriasUncheckedCreateNestedManyWithoutAdminsInput = {
    create?: XOR<CategoriasCreateWithoutAdminsInput, CategoriasUncheckedCreateWithoutAdminsInput> | CategoriasCreateWithoutAdminsInput[] | CategoriasUncheckedCreateWithoutAdminsInput[]
    connectOrCreate?: CategoriasCreateOrConnectWithoutAdminsInput | CategoriasCreateOrConnectWithoutAdminsInput[]
    createMany?: CategoriasCreateManyAdminsInputEnvelope
    connect?: CategoriasWhereUniqueInput | CategoriasWhereUniqueInput[]
  }

  export type RolesUpdateOneRequiredWithoutAdminsNestedInput = {
    create?: XOR<RolesCreateWithoutAdminsInput, RolesUncheckedCreateWithoutAdminsInput>
    connectOrCreate?: RolesCreateOrConnectWithoutAdminsInput
    upsert?: RolesUpsertWithoutAdminsInput
    connect?: RolesWhereUniqueInput
    update?: XOR<XOR<RolesUpdateToOneWithWhereWithoutAdminsInput, RolesUpdateWithoutAdminsInput>, RolesUncheckedUpdateWithoutAdminsInput>
  }

  export type CatalogosUpdateManyWithoutAdminsNestedInput = {
    create?: XOR<CatalogosCreateWithoutAdminsInput, CatalogosUncheckedCreateWithoutAdminsInput> | CatalogosCreateWithoutAdminsInput[] | CatalogosUncheckedCreateWithoutAdminsInput[]
    connectOrCreate?: CatalogosCreateOrConnectWithoutAdminsInput | CatalogosCreateOrConnectWithoutAdminsInput[]
    upsert?: CatalogosUpsertWithWhereUniqueWithoutAdminsInput | CatalogosUpsertWithWhereUniqueWithoutAdminsInput[]
    createMany?: CatalogosCreateManyAdminsInputEnvelope
    set?: CatalogosWhereUniqueInput | CatalogosWhereUniqueInput[]
    disconnect?: CatalogosWhereUniqueInput | CatalogosWhereUniqueInput[]
    delete?: CatalogosWhereUniqueInput | CatalogosWhereUniqueInput[]
    connect?: CatalogosWhereUniqueInput | CatalogosWhereUniqueInput[]
    update?: CatalogosUpdateWithWhereUniqueWithoutAdminsInput | CatalogosUpdateWithWhereUniqueWithoutAdminsInput[]
    updateMany?: CatalogosUpdateManyWithWhereWithoutAdminsInput | CatalogosUpdateManyWithWhereWithoutAdminsInput[]
    deleteMany?: CatalogosScalarWhereInput | CatalogosScalarWhereInput[]
  }

  export type CategoriasUpdateManyWithoutAdminsNestedInput = {
    create?: XOR<CategoriasCreateWithoutAdminsInput, CategoriasUncheckedCreateWithoutAdminsInput> | CategoriasCreateWithoutAdminsInput[] | CategoriasUncheckedCreateWithoutAdminsInput[]
    connectOrCreate?: CategoriasCreateOrConnectWithoutAdminsInput | CategoriasCreateOrConnectWithoutAdminsInput[]
    upsert?: CategoriasUpsertWithWhereUniqueWithoutAdminsInput | CategoriasUpsertWithWhereUniqueWithoutAdminsInput[]
    createMany?: CategoriasCreateManyAdminsInputEnvelope
    set?: CategoriasWhereUniqueInput | CategoriasWhereUniqueInput[]
    disconnect?: CategoriasWhereUniqueInput | CategoriasWhereUniqueInput[]
    delete?: CategoriasWhereUniqueInput | CategoriasWhereUniqueInput[]
    connect?: CategoriasWhereUniqueInput | CategoriasWhereUniqueInput[]
    update?: CategoriasUpdateWithWhereUniqueWithoutAdminsInput | CategoriasUpdateWithWhereUniqueWithoutAdminsInput[]
    updateMany?: CategoriasUpdateManyWithWhereWithoutAdminsInput | CategoriasUpdateManyWithWhereWithoutAdminsInput[]
    deleteMany?: CategoriasScalarWhereInput | CategoriasScalarWhereInput[]
  }

  export type CatalogosUncheckedUpdateManyWithoutAdminsNestedInput = {
    create?: XOR<CatalogosCreateWithoutAdminsInput, CatalogosUncheckedCreateWithoutAdminsInput> | CatalogosCreateWithoutAdminsInput[] | CatalogosUncheckedCreateWithoutAdminsInput[]
    connectOrCreate?: CatalogosCreateOrConnectWithoutAdminsInput | CatalogosCreateOrConnectWithoutAdminsInput[]
    upsert?: CatalogosUpsertWithWhereUniqueWithoutAdminsInput | CatalogosUpsertWithWhereUniqueWithoutAdminsInput[]
    createMany?: CatalogosCreateManyAdminsInputEnvelope
    set?: CatalogosWhereUniqueInput | CatalogosWhereUniqueInput[]
    disconnect?: CatalogosWhereUniqueInput | CatalogosWhereUniqueInput[]
    delete?: CatalogosWhereUniqueInput | CatalogosWhereUniqueInput[]
    connect?: CatalogosWhereUniqueInput | CatalogosWhereUniqueInput[]
    update?: CatalogosUpdateWithWhereUniqueWithoutAdminsInput | CatalogosUpdateWithWhereUniqueWithoutAdminsInput[]
    updateMany?: CatalogosUpdateManyWithWhereWithoutAdminsInput | CatalogosUpdateManyWithWhereWithoutAdminsInput[]
    deleteMany?: CatalogosScalarWhereInput | CatalogosScalarWhereInput[]
  }

  export type CategoriasUncheckedUpdateManyWithoutAdminsNestedInput = {
    create?: XOR<CategoriasCreateWithoutAdminsInput, CategoriasUncheckedCreateWithoutAdminsInput> | CategoriasCreateWithoutAdminsInput[] | CategoriasUncheckedCreateWithoutAdminsInput[]
    connectOrCreate?: CategoriasCreateOrConnectWithoutAdminsInput | CategoriasCreateOrConnectWithoutAdminsInput[]
    upsert?: CategoriasUpsertWithWhereUniqueWithoutAdminsInput | CategoriasUpsertWithWhereUniqueWithoutAdminsInput[]
    createMany?: CategoriasCreateManyAdminsInputEnvelope
    set?: CategoriasWhereUniqueInput | CategoriasWhereUniqueInput[]
    disconnect?: CategoriasWhereUniqueInput | CategoriasWhereUniqueInput[]
    delete?: CategoriasWhereUniqueInput | CategoriasWhereUniqueInput[]
    connect?: CategoriasWhereUniqueInput | CategoriasWhereUniqueInput[]
    update?: CategoriasUpdateWithWhereUniqueWithoutAdminsInput | CategoriasUpdateWithWhereUniqueWithoutAdminsInput[]
    updateMany?: CategoriasUpdateManyWithWhereWithoutAdminsInput | CategoriasUpdateManyWithWhereWithoutAdminsInput[]
    deleteMany?: CategoriasScalarWhereInput | CategoriasScalarWhereInput[]
  }

  export type CategoriasCreateNestedOneWithoutProductosInput = {
    create?: XOR<CategoriasCreateWithoutProductosInput, CategoriasUncheckedCreateWithoutProductosInput>
    connectOrCreate?: CategoriasCreateOrConnectWithoutProductosInput
    connect?: CategoriasWhereUniqueInput
  }

  export type UsuarioCreateNestedOneWithoutProductosInput = {
    create?: XOR<UsuarioCreateWithoutProductosInput, UsuarioUncheckedCreateWithoutProductosInput>
    connectOrCreate?: UsuarioCreateOrConnectWithoutProductosInput
    connect?: UsuarioWhereUniqueInput
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type CategoriasUpdateOneRequiredWithoutProductosNestedInput = {
    create?: XOR<CategoriasCreateWithoutProductosInput, CategoriasUncheckedCreateWithoutProductosInput>
    connectOrCreate?: CategoriasCreateOrConnectWithoutProductosInput
    upsert?: CategoriasUpsertWithoutProductosInput
    connect?: CategoriasWhereUniqueInput
    update?: XOR<XOR<CategoriasUpdateToOneWithWhereWithoutProductosInput, CategoriasUpdateWithoutProductosInput>, CategoriasUncheckedUpdateWithoutProductosInput>
  }

  export type UsuarioUpdateOneRequiredWithoutProductosNestedInput = {
    create?: XOR<UsuarioCreateWithoutProductosInput, UsuarioUncheckedCreateWithoutProductosInput>
    connectOrCreate?: UsuarioCreateOrConnectWithoutProductosInput
    upsert?: UsuarioUpsertWithoutProductosInput
    connect?: UsuarioWhereUniqueInput
    update?: XOR<XOR<UsuarioUpdateToOneWithWhereWithoutProductosInput, UsuarioUpdateWithoutProductosInput>, UsuarioUncheckedUpdateWithoutProductosInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type RolesCreateWithoutUsuariosInput = {
    Nombre: string
    Admins?: AdminCreateNestedManyWithoutRolesInput
  }

  export type RolesUncheckedCreateWithoutUsuariosInput = {
    id?: number
    Nombre: string
    Admins?: AdminUncheckedCreateNestedManyWithoutRolesInput
  }

  export type RolesCreateOrConnectWithoutUsuariosInput = {
    where: RolesWhereUniqueInput
    create: XOR<RolesCreateWithoutUsuariosInput, RolesUncheckedCreateWithoutUsuariosInput>
  }

  export type ProductosCreateWithoutUsuariosInput = {
    Nombre: string
    Descripcion: string
    Disponibilidad: boolean
    Precio: string
    Presentacion: string
    Imagen: string
    categorias: CategoriasCreateNestedOneWithoutProductosInput
  }

  export type ProductosUncheckedCreateWithoutUsuariosInput = {
    id?: number
    Nombre: string
    Descripcion: string
    Disponibilidad: boolean
    Precio: string
    Presentacion: string
    Imagen: string
    id_Categoria: number
  }

  export type ProductosCreateOrConnectWithoutUsuariosInput = {
    where: ProductosWhereUniqueInput
    create: XOR<ProductosCreateWithoutUsuariosInput, ProductosUncheckedCreateWithoutUsuariosInput>
  }

  export type ProductosCreateManyUsuariosInputEnvelope = {
    data: ProductosCreateManyUsuariosInput | ProductosCreateManyUsuariosInput[]
    skipDuplicates?: boolean
  }

  export type RolesUpsertWithoutUsuariosInput = {
    update: XOR<RolesUpdateWithoutUsuariosInput, RolesUncheckedUpdateWithoutUsuariosInput>
    create: XOR<RolesCreateWithoutUsuariosInput, RolesUncheckedCreateWithoutUsuariosInput>
    where?: RolesWhereInput
  }

  export type RolesUpdateToOneWithWhereWithoutUsuariosInput = {
    where?: RolesWhereInput
    data: XOR<RolesUpdateWithoutUsuariosInput, RolesUncheckedUpdateWithoutUsuariosInput>
  }

  export type RolesUpdateWithoutUsuariosInput = {
    Nombre?: StringFieldUpdateOperationsInput | string
    Admins?: AdminUpdateManyWithoutRolesNestedInput
  }

  export type RolesUncheckedUpdateWithoutUsuariosInput = {
    id?: IntFieldUpdateOperationsInput | number
    Nombre?: StringFieldUpdateOperationsInput | string
    Admins?: AdminUncheckedUpdateManyWithoutRolesNestedInput
  }

  export type ProductosUpsertWithWhereUniqueWithoutUsuariosInput = {
    where: ProductosWhereUniqueInput
    update: XOR<ProductosUpdateWithoutUsuariosInput, ProductosUncheckedUpdateWithoutUsuariosInput>
    create: XOR<ProductosCreateWithoutUsuariosInput, ProductosUncheckedCreateWithoutUsuariosInput>
  }

  export type ProductosUpdateWithWhereUniqueWithoutUsuariosInput = {
    where: ProductosWhereUniqueInput
    data: XOR<ProductosUpdateWithoutUsuariosInput, ProductosUncheckedUpdateWithoutUsuariosInput>
  }

  export type ProductosUpdateManyWithWhereWithoutUsuariosInput = {
    where: ProductosScalarWhereInput
    data: XOR<ProductosUpdateManyMutationInput, ProductosUncheckedUpdateManyWithoutUsuariosInput>
  }

  export type ProductosScalarWhereInput = {
    AND?: ProductosScalarWhereInput | ProductosScalarWhereInput[]
    OR?: ProductosScalarWhereInput[]
    NOT?: ProductosScalarWhereInput | ProductosScalarWhereInput[]
    id?: IntFilter<"Productos"> | number
    Nombre?: StringFilter<"Productos"> | string
    Descripcion?: StringFilter<"Productos"> | string
    Disponibilidad?: BoolFilter<"Productos"> | boolean
    Precio?: StringFilter<"Productos"> | string
    Presentacion?: StringFilter<"Productos"> | string
    Imagen?: StringFilter<"Productos"> | string
    id_Categoria?: IntFilter<"Productos"> | number
    id_Usuario?: IntFilter<"Productos"> | number
  }

  export type UsuarioCreateWithoutRolesInput = {
    Nombres: string
    Apellidos: string
    UserName: string
    Password: string
    Email: string
    Celular: string
    Imagen: string
    DateCreated?: Date | string
    productos?: ProductosCreateNestedManyWithoutUsuariosInput
  }

  export type UsuarioUncheckedCreateWithoutRolesInput = {
    id?: number
    Nombres: string
    Apellidos: string
    UserName: string
    Password: string
    Email: string
    Celular: string
    Imagen: string
    DateCreated?: Date | string
    productos?: ProductosUncheckedCreateNestedManyWithoutUsuariosInput
  }

  export type UsuarioCreateOrConnectWithoutRolesInput = {
    where: UsuarioWhereUniqueInput
    create: XOR<UsuarioCreateWithoutRolesInput, UsuarioUncheckedCreateWithoutRolesInput>
  }

  export type UsuarioCreateManyRolesInputEnvelope = {
    data: UsuarioCreateManyRolesInput | UsuarioCreateManyRolesInput[]
    skipDuplicates?: boolean
  }

  export type AdminCreateWithoutRolesInput = {
    Email: string
    UserName: string
    Password: string
    celular: string
    catalogos?: CatalogosCreateNestedManyWithoutAdminsInput
    categorias?: CategoriasCreateNestedManyWithoutAdminsInput
  }

  export type AdminUncheckedCreateWithoutRolesInput = {
    id?: number
    Email: string
    UserName: string
    Password: string
    celular: string
    catalogos?: CatalogosUncheckedCreateNestedManyWithoutAdminsInput
    categorias?: CategoriasUncheckedCreateNestedManyWithoutAdminsInput
  }

  export type AdminCreateOrConnectWithoutRolesInput = {
    where: AdminWhereUniqueInput
    create: XOR<AdminCreateWithoutRolesInput, AdminUncheckedCreateWithoutRolesInput>
  }

  export type AdminCreateManyRolesInputEnvelope = {
    data: AdminCreateManyRolesInput | AdminCreateManyRolesInput[]
    skipDuplicates?: boolean
  }

  export type UsuarioUpsertWithWhereUniqueWithoutRolesInput = {
    where: UsuarioWhereUniqueInput
    update: XOR<UsuarioUpdateWithoutRolesInput, UsuarioUncheckedUpdateWithoutRolesInput>
    create: XOR<UsuarioCreateWithoutRolesInput, UsuarioUncheckedCreateWithoutRolesInput>
  }

  export type UsuarioUpdateWithWhereUniqueWithoutRolesInput = {
    where: UsuarioWhereUniqueInput
    data: XOR<UsuarioUpdateWithoutRolesInput, UsuarioUncheckedUpdateWithoutRolesInput>
  }

  export type UsuarioUpdateManyWithWhereWithoutRolesInput = {
    where: UsuarioScalarWhereInput
    data: XOR<UsuarioUpdateManyMutationInput, UsuarioUncheckedUpdateManyWithoutRolesInput>
  }

  export type UsuarioScalarWhereInput = {
    AND?: UsuarioScalarWhereInput | UsuarioScalarWhereInput[]
    OR?: UsuarioScalarWhereInput[]
    NOT?: UsuarioScalarWhereInput | UsuarioScalarWhereInput[]
    id?: IntFilter<"Usuario"> | number
    Nombres?: StringFilter<"Usuario"> | string
    Apellidos?: StringFilter<"Usuario"> | string
    UserName?: StringFilter<"Usuario"> | string
    Password?: StringFilter<"Usuario"> | string
    Email?: StringFilter<"Usuario"> | string
    Celular?: StringFilter<"Usuario"> | string
    Imagen?: StringFilter<"Usuario"> | string
    DateCreated?: DateTimeFilter<"Usuario"> | Date | string
    id_Rol?: IntFilter<"Usuario"> | number
  }

  export type AdminUpsertWithWhereUniqueWithoutRolesInput = {
    where: AdminWhereUniqueInput
    update: XOR<AdminUpdateWithoutRolesInput, AdminUncheckedUpdateWithoutRolesInput>
    create: XOR<AdminCreateWithoutRolesInput, AdminUncheckedCreateWithoutRolesInput>
  }

  export type AdminUpdateWithWhereUniqueWithoutRolesInput = {
    where: AdminWhereUniqueInput
    data: XOR<AdminUpdateWithoutRolesInput, AdminUncheckedUpdateWithoutRolesInput>
  }

  export type AdminUpdateManyWithWhereWithoutRolesInput = {
    where: AdminScalarWhereInput
    data: XOR<AdminUpdateManyMutationInput, AdminUncheckedUpdateManyWithoutRolesInput>
  }

  export type AdminScalarWhereInput = {
    AND?: AdminScalarWhereInput | AdminScalarWhereInput[]
    OR?: AdminScalarWhereInput[]
    NOT?: AdminScalarWhereInput | AdminScalarWhereInput[]
    id?: IntFilter<"Admin"> | number
    Email?: StringFilter<"Admin"> | string
    UserName?: StringFilter<"Admin"> | string
    Password?: StringFilter<"Admin"> | string
    celular?: StringFilter<"Admin"> | string
    id_Rol?: IntFilter<"Admin"> | number
  }

  export type CategoriasCreateWithoutCatalogosInput = {
    Nombre: string
    productos?: ProductosCreateNestedManyWithoutCategoriasInput
    Admins: AdminCreateNestedOneWithoutCategoriasInput
  }

  export type CategoriasUncheckedCreateWithoutCatalogosInput = {
    id?: number
    Nombre: string
    id_Admin: number
    productos?: ProductosUncheckedCreateNestedManyWithoutCategoriasInput
  }

  export type CategoriasCreateOrConnectWithoutCatalogosInput = {
    where: CategoriasWhereUniqueInput
    create: XOR<CategoriasCreateWithoutCatalogosInput, CategoriasUncheckedCreateWithoutCatalogosInput>
  }

  export type CategoriasCreateManyCatalogosInputEnvelope = {
    data: CategoriasCreateManyCatalogosInput | CategoriasCreateManyCatalogosInput[]
    skipDuplicates?: boolean
  }

  export type AdminCreateWithoutCatalogosInput = {
    Email: string
    UserName: string
    Password: string
    celular: string
    roles: RolesCreateNestedOneWithoutAdminsInput
    categorias?: CategoriasCreateNestedManyWithoutAdminsInput
  }

  export type AdminUncheckedCreateWithoutCatalogosInput = {
    id?: number
    Email: string
    UserName: string
    Password: string
    celular: string
    id_Rol: number
    categorias?: CategoriasUncheckedCreateNestedManyWithoutAdminsInput
  }

  export type AdminCreateOrConnectWithoutCatalogosInput = {
    where: AdminWhereUniqueInput
    create: XOR<AdminCreateWithoutCatalogosInput, AdminUncheckedCreateWithoutCatalogosInput>
  }

  export type CategoriasUpsertWithWhereUniqueWithoutCatalogosInput = {
    where: CategoriasWhereUniqueInput
    update: XOR<CategoriasUpdateWithoutCatalogosInput, CategoriasUncheckedUpdateWithoutCatalogosInput>
    create: XOR<CategoriasCreateWithoutCatalogosInput, CategoriasUncheckedCreateWithoutCatalogosInput>
  }

  export type CategoriasUpdateWithWhereUniqueWithoutCatalogosInput = {
    where: CategoriasWhereUniqueInput
    data: XOR<CategoriasUpdateWithoutCatalogosInput, CategoriasUncheckedUpdateWithoutCatalogosInput>
  }

  export type CategoriasUpdateManyWithWhereWithoutCatalogosInput = {
    where: CategoriasScalarWhereInput
    data: XOR<CategoriasUpdateManyMutationInput, CategoriasUncheckedUpdateManyWithoutCatalogosInput>
  }

  export type CategoriasScalarWhereInput = {
    AND?: CategoriasScalarWhereInput | CategoriasScalarWhereInput[]
    OR?: CategoriasScalarWhereInput[]
    NOT?: CategoriasScalarWhereInput | CategoriasScalarWhereInput[]
    id?: IntFilter<"Categorias"> | number
    Nombre?: StringFilter<"Categorias"> | string
    id_Cat?: IntFilter<"Categorias"> | number
    id_Admin?: IntFilter<"Categorias"> | number
  }

  export type AdminUpsertWithoutCatalogosInput = {
    update: XOR<AdminUpdateWithoutCatalogosInput, AdminUncheckedUpdateWithoutCatalogosInput>
    create: XOR<AdminCreateWithoutCatalogosInput, AdminUncheckedCreateWithoutCatalogosInput>
    where?: AdminWhereInput
  }

  export type AdminUpdateToOneWithWhereWithoutCatalogosInput = {
    where?: AdminWhereInput
    data: XOR<AdminUpdateWithoutCatalogosInput, AdminUncheckedUpdateWithoutCatalogosInput>
  }

  export type AdminUpdateWithoutCatalogosInput = {
    Email?: StringFieldUpdateOperationsInput | string
    UserName?: StringFieldUpdateOperationsInput | string
    Password?: StringFieldUpdateOperationsInput | string
    celular?: StringFieldUpdateOperationsInput | string
    roles?: RolesUpdateOneRequiredWithoutAdminsNestedInput
    categorias?: CategoriasUpdateManyWithoutAdminsNestedInput
  }

  export type AdminUncheckedUpdateWithoutCatalogosInput = {
    id?: IntFieldUpdateOperationsInput | number
    Email?: StringFieldUpdateOperationsInput | string
    UserName?: StringFieldUpdateOperationsInput | string
    Password?: StringFieldUpdateOperationsInput | string
    celular?: StringFieldUpdateOperationsInput | string
    id_Rol?: IntFieldUpdateOperationsInput | number
    categorias?: CategoriasUncheckedUpdateManyWithoutAdminsNestedInput
  }

  export type ProductosCreateWithoutCategoriasInput = {
    Nombre: string
    Descripcion: string
    Disponibilidad: boolean
    Precio: string
    Presentacion: string
    Imagen: string
    usuarios: UsuarioCreateNestedOneWithoutProductosInput
  }

  export type ProductosUncheckedCreateWithoutCategoriasInput = {
    id?: number
    Nombre: string
    Descripcion: string
    Disponibilidad: boolean
    Precio: string
    Presentacion: string
    Imagen: string
    id_Usuario: number
  }

  export type ProductosCreateOrConnectWithoutCategoriasInput = {
    where: ProductosWhereUniqueInput
    create: XOR<ProductosCreateWithoutCategoriasInput, ProductosUncheckedCreateWithoutCategoriasInput>
  }

  export type ProductosCreateManyCategoriasInputEnvelope = {
    data: ProductosCreateManyCategoriasInput | ProductosCreateManyCategoriasInput[]
    skipDuplicates?: boolean
  }

  export type CatalogosCreateWithoutCategoriasInput = {
    Nombre: string
    Descripcion?: string | null
    Admins: AdminCreateNestedOneWithoutCatalogosInput
  }

  export type CatalogosUncheckedCreateWithoutCategoriasInput = {
    id?: number
    Nombre: string
    Descripcion?: string | null
    id_Admin: number
  }

  export type CatalogosCreateOrConnectWithoutCategoriasInput = {
    where: CatalogosWhereUniqueInput
    create: XOR<CatalogosCreateWithoutCategoriasInput, CatalogosUncheckedCreateWithoutCategoriasInput>
  }

  export type AdminCreateWithoutCategoriasInput = {
    Email: string
    UserName: string
    Password: string
    celular: string
    roles: RolesCreateNestedOneWithoutAdminsInput
    catalogos?: CatalogosCreateNestedManyWithoutAdminsInput
  }

  export type AdminUncheckedCreateWithoutCategoriasInput = {
    id?: number
    Email: string
    UserName: string
    Password: string
    celular: string
    id_Rol: number
    catalogos?: CatalogosUncheckedCreateNestedManyWithoutAdminsInput
  }

  export type AdminCreateOrConnectWithoutCategoriasInput = {
    where: AdminWhereUniqueInput
    create: XOR<AdminCreateWithoutCategoriasInput, AdminUncheckedCreateWithoutCategoriasInput>
  }

  export type ProductosUpsertWithWhereUniqueWithoutCategoriasInput = {
    where: ProductosWhereUniqueInput
    update: XOR<ProductosUpdateWithoutCategoriasInput, ProductosUncheckedUpdateWithoutCategoriasInput>
    create: XOR<ProductosCreateWithoutCategoriasInput, ProductosUncheckedCreateWithoutCategoriasInput>
  }

  export type ProductosUpdateWithWhereUniqueWithoutCategoriasInput = {
    where: ProductosWhereUniqueInput
    data: XOR<ProductosUpdateWithoutCategoriasInput, ProductosUncheckedUpdateWithoutCategoriasInput>
  }

  export type ProductosUpdateManyWithWhereWithoutCategoriasInput = {
    where: ProductosScalarWhereInput
    data: XOR<ProductosUpdateManyMutationInput, ProductosUncheckedUpdateManyWithoutCategoriasInput>
  }

  export type CatalogosUpsertWithoutCategoriasInput = {
    update: XOR<CatalogosUpdateWithoutCategoriasInput, CatalogosUncheckedUpdateWithoutCategoriasInput>
    create: XOR<CatalogosCreateWithoutCategoriasInput, CatalogosUncheckedCreateWithoutCategoriasInput>
    where?: CatalogosWhereInput
  }

  export type CatalogosUpdateToOneWithWhereWithoutCategoriasInput = {
    where?: CatalogosWhereInput
    data: XOR<CatalogosUpdateWithoutCategoriasInput, CatalogosUncheckedUpdateWithoutCategoriasInput>
  }

  export type CatalogosUpdateWithoutCategoriasInput = {
    Nombre?: StringFieldUpdateOperationsInput | string
    Descripcion?: NullableStringFieldUpdateOperationsInput | string | null
    Admins?: AdminUpdateOneRequiredWithoutCatalogosNestedInput
  }

  export type CatalogosUncheckedUpdateWithoutCategoriasInput = {
    id?: IntFieldUpdateOperationsInput | number
    Nombre?: StringFieldUpdateOperationsInput | string
    Descripcion?: NullableStringFieldUpdateOperationsInput | string | null
    id_Admin?: IntFieldUpdateOperationsInput | number
  }

  export type AdminUpsertWithoutCategoriasInput = {
    update: XOR<AdminUpdateWithoutCategoriasInput, AdminUncheckedUpdateWithoutCategoriasInput>
    create: XOR<AdminCreateWithoutCategoriasInput, AdminUncheckedCreateWithoutCategoriasInput>
    where?: AdminWhereInput
  }

  export type AdminUpdateToOneWithWhereWithoutCategoriasInput = {
    where?: AdminWhereInput
    data: XOR<AdminUpdateWithoutCategoriasInput, AdminUncheckedUpdateWithoutCategoriasInput>
  }

  export type AdminUpdateWithoutCategoriasInput = {
    Email?: StringFieldUpdateOperationsInput | string
    UserName?: StringFieldUpdateOperationsInput | string
    Password?: StringFieldUpdateOperationsInput | string
    celular?: StringFieldUpdateOperationsInput | string
    roles?: RolesUpdateOneRequiredWithoutAdminsNestedInput
    catalogos?: CatalogosUpdateManyWithoutAdminsNestedInput
  }

  export type AdminUncheckedUpdateWithoutCategoriasInput = {
    id?: IntFieldUpdateOperationsInput | number
    Email?: StringFieldUpdateOperationsInput | string
    UserName?: StringFieldUpdateOperationsInput | string
    Password?: StringFieldUpdateOperationsInput | string
    celular?: StringFieldUpdateOperationsInput | string
    id_Rol?: IntFieldUpdateOperationsInput | number
    catalogos?: CatalogosUncheckedUpdateManyWithoutAdminsNestedInput
  }

  export type RolesCreateWithoutAdminsInput = {
    Nombre: string
    usuarios?: UsuarioCreateNestedManyWithoutRolesInput
  }

  export type RolesUncheckedCreateWithoutAdminsInput = {
    id?: number
    Nombre: string
    usuarios?: UsuarioUncheckedCreateNestedManyWithoutRolesInput
  }

  export type RolesCreateOrConnectWithoutAdminsInput = {
    where: RolesWhereUniqueInput
    create: XOR<RolesCreateWithoutAdminsInput, RolesUncheckedCreateWithoutAdminsInput>
  }

  export type CatalogosCreateWithoutAdminsInput = {
    Nombre: string
    Descripcion?: string | null
    categorias?: CategoriasCreateNestedManyWithoutCatalogosInput
  }

  export type CatalogosUncheckedCreateWithoutAdminsInput = {
    id?: number
    Nombre: string
    Descripcion?: string | null
    categorias?: CategoriasUncheckedCreateNestedManyWithoutCatalogosInput
  }

  export type CatalogosCreateOrConnectWithoutAdminsInput = {
    where: CatalogosWhereUniqueInput
    create: XOR<CatalogosCreateWithoutAdminsInput, CatalogosUncheckedCreateWithoutAdminsInput>
  }

  export type CatalogosCreateManyAdminsInputEnvelope = {
    data: CatalogosCreateManyAdminsInput | CatalogosCreateManyAdminsInput[]
    skipDuplicates?: boolean
  }

  export type CategoriasCreateWithoutAdminsInput = {
    Nombre: string
    productos?: ProductosCreateNestedManyWithoutCategoriasInput
    catalogos: CatalogosCreateNestedOneWithoutCategoriasInput
  }

  export type CategoriasUncheckedCreateWithoutAdminsInput = {
    id?: number
    Nombre: string
    id_Cat: number
    productos?: ProductosUncheckedCreateNestedManyWithoutCategoriasInput
  }

  export type CategoriasCreateOrConnectWithoutAdminsInput = {
    where: CategoriasWhereUniqueInput
    create: XOR<CategoriasCreateWithoutAdminsInput, CategoriasUncheckedCreateWithoutAdminsInput>
  }

  export type CategoriasCreateManyAdminsInputEnvelope = {
    data: CategoriasCreateManyAdminsInput | CategoriasCreateManyAdminsInput[]
    skipDuplicates?: boolean
  }

  export type RolesUpsertWithoutAdminsInput = {
    update: XOR<RolesUpdateWithoutAdminsInput, RolesUncheckedUpdateWithoutAdminsInput>
    create: XOR<RolesCreateWithoutAdminsInput, RolesUncheckedCreateWithoutAdminsInput>
    where?: RolesWhereInput
  }

  export type RolesUpdateToOneWithWhereWithoutAdminsInput = {
    where?: RolesWhereInput
    data: XOR<RolesUpdateWithoutAdminsInput, RolesUncheckedUpdateWithoutAdminsInput>
  }

  export type RolesUpdateWithoutAdminsInput = {
    Nombre?: StringFieldUpdateOperationsInput | string
    usuarios?: UsuarioUpdateManyWithoutRolesNestedInput
  }

  export type RolesUncheckedUpdateWithoutAdminsInput = {
    id?: IntFieldUpdateOperationsInput | number
    Nombre?: StringFieldUpdateOperationsInput | string
    usuarios?: UsuarioUncheckedUpdateManyWithoutRolesNestedInput
  }

  export type CatalogosUpsertWithWhereUniqueWithoutAdminsInput = {
    where: CatalogosWhereUniqueInput
    update: XOR<CatalogosUpdateWithoutAdminsInput, CatalogosUncheckedUpdateWithoutAdminsInput>
    create: XOR<CatalogosCreateWithoutAdminsInput, CatalogosUncheckedCreateWithoutAdminsInput>
  }

  export type CatalogosUpdateWithWhereUniqueWithoutAdminsInput = {
    where: CatalogosWhereUniqueInput
    data: XOR<CatalogosUpdateWithoutAdminsInput, CatalogosUncheckedUpdateWithoutAdminsInput>
  }

  export type CatalogosUpdateManyWithWhereWithoutAdminsInput = {
    where: CatalogosScalarWhereInput
    data: XOR<CatalogosUpdateManyMutationInput, CatalogosUncheckedUpdateManyWithoutAdminsInput>
  }

  export type CatalogosScalarWhereInput = {
    AND?: CatalogosScalarWhereInput | CatalogosScalarWhereInput[]
    OR?: CatalogosScalarWhereInput[]
    NOT?: CatalogosScalarWhereInput | CatalogosScalarWhereInput[]
    id?: IntFilter<"Catalogos"> | number
    Nombre?: StringFilter<"Catalogos"> | string
    Descripcion?: StringNullableFilter<"Catalogos"> | string | null
    id_Admin?: IntFilter<"Catalogos"> | number
  }

  export type CategoriasUpsertWithWhereUniqueWithoutAdminsInput = {
    where: CategoriasWhereUniqueInput
    update: XOR<CategoriasUpdateWithoutAdminsInput, CategoriasUncheckedUpdateWithoutAdminsInput>
    create: XOR<CategoriasCreateWithoutAdminsInput, CategoriasUncheckedCreateWithoutAdminsInput>
  }

  export type CategoriasUpdateWithWhereUniqueWithoutAdminsInput = {
    where: CategoriasWhereUniqueInput
    data: XOR<CategoriasUpdateWithoutAdminsInput, CategoriasUncheckedUpdateWithoutAdminsInput>
  }

  export type CategoriasUpdateManyWithWhereWithoutAdminsInput = {
    where: CategoriasScalarWhereInput
    data: XOR<CategoriasUpdateManyMutationInput, CategoriasUncheckedUpdateManyWithoutAdminsInput>
  }

  export type CategoriasCreateWithoutProductosInput = {
    Nombre: string
    catalogos: CatalogosCreateNestedOneWithoutCategoriasInput
    Admins: AdminCreateNestedOneWithoutCategoriasInput
  }

  export type CategoriasUncheckedCreateWithoutProductosInput = {
    id?: number
    Nombre: string
    id_Cat: number
    id_Admin: number
  }

  export type CategoriasCreateOrConnectWithoutProductosInput = {
    where: CategoriasWhereUniqueInput
    create: XOR<CategoriasCreateWithoutProductosInput, CategoriasUncheckedCreateWithoutProductosInput>
  }

  export type UsuarioCreateWithoutProductosInput = {
    Nombres: string
    Apellidos: string
    UserName: string
    Password: string
    Email: string
    Celular: string
    Imagen: string
    DateCreated?: Date | string
    roles: RolesCreateNestedOneWithoutUsuariosInput
  }

  export type UsuarioUncheckedCreateWithoutProductosInput = {
    id?: number
    Nombres: string
    Apellidos: string
    UserName: string
    Password: string
    Email: string
    Celular: string
    Imagen: string
    DateCreated?: Date | string
    id_Rol: number
  }

  export type UsuarioCreateOrConnectWithoutProductosInput = {
    where: UsuarioWhereUniqueInput
    create: XOR<UsuarioCreateWithoutProductosInput, UsuarioUncheckedCreateWithoutProductosInput>
  }

  export type CategoriasUpsertWithoutProductosInput = {
    update: XOR<CategoriasUpdateWithoutProductosInput, CategoriasUncheckedUpdateWithoutProductosInput>
    create: XOR<CategoriasCreateWithoutProductosInput, CategoriasUncheckedCreateWithoutProductosInput>
    where?: CategoriasWhereInput
  }

  export type CategoriasUpdateToOneWithWhereWithoutProductosInput = {
    where?: CategoriasWhereInput
    data: XOR<CategoriasUpdateWithoutProductosInput, CategoriasUncheckedUpdateWithoutProductosInput>
  }

  export type CategoriasUpdateWithoutProductosInput = {
    Nombre?: StringFieldUpdateOperationsInput | string
    catalogos?: CatalogosUpdateOneRequiredWithoutCategoriasNestedInput
    Admins?: AdminUpdateOneRequiredWithoutCategoriasNestedInput
  }

  export type CategoriasUncheckedUpdateWithoutProductosInput = {
    id?: IntFieldUpdateOperationsInput | number
    Nombre?: StringFieldUpdateOperationsInput | string
    id_Cat?: IntFieldUpdateOperationsInput | number
    id_Admin?: IntFieldUpdateOperationsInput | number
  }

  export type UsuarioUpsertWithoutProductosInput = {
    update: XOR<UsuarioUpdateWithoutProductosInput, UsuarioUncheckedUpdateWithoutProductosInput>
    create: XOR<UsuarioCreateWithoutProductosInput, UsuarioUncheckedCreateWithoutProductosInput>
    where?: UsuarioWhereInput
  }

  export type UsuarioUpdateToOneWithWhereWithoutProductosInput = {
    where?: UsuarioWhereInput
    data: XOR<UsuarioUpdateWithoutProductosInput, UsuarioUncheckedUpdateWithoutProductosInput>
  }

  export type UsuarioUpdateWithoutProductosInput = {
    Nombres?: StringFieldUpdateOperationsInput | string
    Apellidos?: StringFieldUpdateOperationsInput | string
    UserName?: StringFieldUpdateOperationsInput | string
    Password?: StringFieldUpdateOperationsInput | string
    Email?: StringFieldUpdateOperationsInput | string
    Celular?: StringFieldUpdateOperationsInput | string
    Imagen?: StringFieldUpdateOperationsInput | string
    DateCreated?: DateTimeFieldUpdateOperationsInput | Date | string
    roles?: RolesUpdateOneRequiredWithoutUsuariosNestedInput
  }

  export type UsuarioUncheckedUpdateWithoutProductosInput = {
    id?: IntFieldUpdateOperationsInput | number
    Nombres?: StringFieldUpdateOperationsInput | string
    Apellidos?: StringFieldUpdateOperationsInput | string
    UserName?: StringFieldUpdateOperationsInput | string
    Password?: StringFieldUpdateOperationsInput | string
    Email?: StringFieldUpdateOperationsInput | string
    Celular?: StringFieldUpdateOperationsInput | string
    Imagen?: StringFieldUpdateOperationsInput | string
    DateCreated?: DateTimeFieldUpdateOperationsInput | Date | string
    id_Rol?: IntFieldUpdateOperationsInput | number
  }

  export type ProductosCreateManyUsuariosInput = {
    id?: number
    Nombre: string
    Descripcion: string
    Disponibilidad: boolean
    Precio: string
    Presentacion: string
    Imagen: string
    id_Categoria: number
  }

  export type ProductosUpdateWithoutUsuariosInput = {
    Nombre?: StringFieldUpdateOperationsInput | string
    Descripcion?: StringFieldUpdateOperationsInput | string
    Disponibilidad?: BoolFieldUpdateOperationsInput | boolean
    Precio?: StringFieldUpdateOperationsInput | string
    Presentacion?: StringFieldUpdateOperationsInput | string
    Imagen?: StringFieldUpdateOperationsInput | string
    categorias?: CategoriasUpdateOneRequiredWithoutProductosNestedInput
  }

  export type ProductosUncheckedUpdateWithoutUsuariosInput = {
    id?: IntFieldUpdateOperationsInput | number
    Nombre?: StringFieldUpdateOperationsInput | string
    Descripcion?: StringFieldUpdateOperationsInput | string
    Disponibilidad?: BoolFieldUpdateOperationsInput | boolean
    Precio?: StringFieldUpdateOperationsInput | string
    Presentacion?: StringFieldUpdateOperationsInput | string
    Imagen?: StringFieldUpdateOperationsInput | string
    id_Categoria?: IntFieldUpdateOperationsInput | number
  }

  export type ProductosUncheckedUpdateManyWithoutUsuariosInput = {
    id?: IntFieldUpdateOperationsInput | number
    Nombre?: StringFieldUpdateOperationsInput | string
    Descripcion?: StringFieldUpdateOperationsInput | string
    Disponibilidad?: BoolFieldUpdateOperationsInput | boolean
    Precio?: StringFieldUpdateOperationsInput | string
    Presentacion?: StringFieldUpdateOperationsInput | string
    Imagen?: StringFieldUpdateOperationsInput | string
    id_Categoria?: IntFieldUpdateOperationsInput | number
  }

  export type UsuarioCreateManyRolesInput = {
    id?: number
    Nombres: string
    Apellidos: string
    UserName: string
    Password: string
    Email: string
    Celular: string
    Imagen: string
    DateCreated?: Date | string
  }

  export type AdminCreateManyRolesInput = {
    id?: number
    Email: string
    UserName: string
    Password: string
    celular: string
  }

  export type UsuarioUpdateWithoutRolesInput = {
    Nombres?: StringFieldUpdateOperationsInput | string
    Apellidos?: StringFieldUpdateOperationsInput | string
    UserName?: StringFieldUpdateOperationsInput | string
    Password?: StringFieldUpdateOperationsInput | string
    Email?: StringFieldUpdateOperationsInput | string
    Celular?: StringFieldUpdateOperationsInput | string
    Imagen?: StringFieldUpdateOperationsInput | string
    DateCreated?: DateTimeFieldUpdateOperationsInput | Date | string
    productos?: ProductosUpdateManyWithoutUsuariosNestedInput
  }

  export type UsuarioUncheckedUpdateWithoutRolesInput = {
    id?: IntFieldUpdateOperationsInput | number
    Nombres?: StringFieldUpdateOperationsInput | string
    Apellidos?: StringFieldUpdateOperationsInput | string
    UserName?: StringFieldUpdateOperationsInput | string
    Password?: StringFieldUpdateOperationsInput | string
    Email?: StringFieldUpdateOperationsInput | string
    Celular?: StringFieldUpdateOperationsInput | string
    Imagen?: StringFieldUpdateOperationsInput | string
    DateCreated?: DateTimeFieldUpdateOperationsInput | Date | string
    productos?: ProductosUncheckedUpdateManyWithoutUsuariosNestedInput
  }

  export type UsuarioUncheckedUpdateManyWithoutRolesInput = {
    id?: IntFieldUpdateOperationsInput | number
    Nombres?: StringFieldUpdateOperationsInput | string
    Apellidos?: StringFieldUpdateOperationsInput | string
    UserName?: StringFieldUpdateOperationsInput | string
    Password?: StringFieldUpdateOperationsInput | string
    Email?: StringFieldUpdateOperationsInput | string
    Celular?: StringFieldUpdateOperationsInput | string
    Imagen?: StringFieldUpdateOperationsInput | string
    DateCreated?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AdminUpdateWithoutRolesInput = {
    Email?: StringFieldUpdateOperationsInput | string
    UserName?: StringFieldUpdateOperationsInput | string
    Password?: StringFieldUpdateOperationsInput | string
    celular?: StringFieldUpdateOperationsInput | string
    catalogos?: CatalogosUpdateManyWithoutAdminsNestedInput
    categorias?: CategoriasUpdateManyWithoutAdminsNestedInput
  }

  export type AdminUncheckedUpdateWithoutRolesInput = {
    id?: IntFieldUpdateOperationsInput | number
    Email?: StringFieldUpdateOperationsInput | string
    UserName?: StringFieldUpdateOperationsInput | string
    Password?: StringFieldUpdateOperationsInput | string
    celular?: StringFieldUpdateOperationsInput | string
    catalogos?: CatalogosUncheckedUpdateManyWithoutAdminsNestedInput
    categorias?: CategoriasUncheckedUpdateManyWithoutAdminsNestedInput
  }

  export type AdminUncheckedUpdateManyWithoutRolesInput = {
    id?: IntFieldUpdateOperationsInput | number
    Email?: StringFieldUpdateOperationsInput | string
    UserName?: StringFieldUpdateOperationsInput | string
    Password?: StringFieldUpdateOperationsInput | string
    celular?: StringFieldUpdateOperationsInput | string
  }

  export type CategoriasCreateManyCatalogosInput = {
    id?: number
    Nombre: string
    id_Admin: number
  }

  export type CategoriasUpdateWithoutCatalogosInput = {
    Nombre?: StringFieldUpdateOperationsInput | string
    productos?: ProductosUpdateManyWithoutCategoriasNestedInput
    Admins?: AdminUpdateOneRequiredWithoutCategoriasNestedInput
  }

  export type CategoriasUncheckedUpdateWithoutCatalogosInput = {
    id?: IntFieldUpdateOperationsInput | number
    Nombre?: StringFieldUpdateOperationsInput | string
    id_Admin?: IntFieldUpdateOperationsInput | number
    productos?: ProductosUncheckedUpdateManyWithoutCategoriasNestedInput
  }

  export type CategoriasUncheckedUpdateManyWithoutCatalogosInput = {
    id?: IntFieldUpdateOperationsInput | number
    Nombre?: StringFieldUpdateOperationsInput | string
    id_Admin?: IntFieldUpdateOperationsInput | number
  }

  export type ProductosCreateManyCategoriasInput = {
    id?: number
    Nombre: string
    Descripcion: string
    Disponibilidad: boolean
    Precio: string
    Presentacion: string
    Imagen: string
    id_Usuario: number
  }

  export type ProductosUpdateWithoutCategoriasInput = {
    Nombre?: StringFieldUpdateOperationsInput | string
    Descripcion?: StringFieldUpdateOperationsInput | string
    Disponibilidad?: BoolFieldUpdateOperationsInput | boolean
    Precio?: StringFieldUpdateOperationsInput | string
    Presentacion?: StringFieldUpdateOperationsInput | string
    Imagen?: StringFieldUpdateOperationsInput | string
    usuarios?: UsuarioUpdateOneRequiredWithoutProductosNestedInput
  }

  export type ProductosUncheckedUpdateWithoutCategoriasInput = {
    id?: IntFieldUpdateOperationsInput | number
    Nombre?: StringFieldUpdateOperationsInput | string
    Descripcion?: StringFieldUpdateOperationsInput | string
    Disponibilidad?: BoolFieldUpdateOperationsInput | boolean
    Precio?: StringFieldUpdateOperationsInput | string
    Presentacion?: StringFieldUpdateOperationsInput | string
    Imagen?: StringFieldUpdateOperationsInput | string
    id_Usuario?: IntFieldUpdateOperationsInput | number
  }

  export type ProductosUncheckedUpdateManyWithoutCategoriasInput = {
    id?: IntFieldUpdateOperationsInput | number
    Nombre?: StringFieldUpdateOperationsInput | string
    Descripcion?: StringFieldUpdateOperationsInput | string
    Disponibilidad?: BoolFieldUpdateOperationsInput | boolean
    Precio?: StringFieldUpdateOperationsInput | string
    Presentacion?: StringFieldUpdateOperationsInput | string
    Imagen?: StringFieldUpdateOperationsInput | string
    id_Usuario?: IntFieldUpdateOperationsInput | number
  }

  export type CatalogosCreateManyAdminsInput = {
    id?: number
    Nombre: string
    Descripcion?: string | null
  }

  export type CategoriasCreateManyAdminsInput = {
    id?: number
    Nombre: string
    id_Cat: number
  }

  export type CatalogosUpdateWithoutAdminsInput = {
    Nombre?: StringFieldUpdateOperationsInput | string
    Descripcion?: NullableStringFieldUpdateOperationsInput | string | null
    categorias?: CategoriasUpdateManyWithoutCatalogosNestedInput
  }

  export type CatalogosUncheckedUpdateWithoutAdminsInput = {
    id?: IntFieldUpdateOperationsInput | number
    Nombre?: StringFieldUpdateOperationsInput | string
    Descripcion?: NullableStringFieldUpdateOperationsInput | string | null
    categorias?: CategoriasUncheckedUpdateManyWithoutCatalogosNestedInput
  }

  export type CatalogosUncheckedUpdateManyWithoutAdminsInput = {
    id?: IntFieldUpdateOperationsInput | number
    Nombre?: StringFieldUpdateOperationsInput | string
    Descripcion?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CategoriasUpdateWithoutAdminsInput = {
    Nombre?: StringFieldUpdateOperationsInput | string
    productos?: ProductosUpdateManyWithoutCategoriasNestedInput
    catalogos?: CatalogosUpdateOneRequiredWithoutCategoriasNestedInput
  }

  export type CategoriasUncheckedUpdateWithoutAdminsInput = {
    id?: IntFieldUpdateOperationsInput | number
    Nombre?: StringFieldUpdateOperationsInput | string
    id_Cat?: IntFieldUpdateOperationsInput | number
    productos?: ProductosUncheckedUpdateManyWithoutCategoriasNestedInput
  }

  export type CategoriasUncheckedUpdateManyWithoutAdminsInput = {
    id?: IntFieldUpdateOperationsInput | number
    Nombre?: StringFieldUpdateOperationsInput | string
    id_Cat?: IntFieldUpdateOperationsInput | number
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UsuarioCountOutputTypeDefaultArgs instead
     */
    export type UsuarioCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UsuarioCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use RolesCountOutputTypeDefaultArgs instead
     */
    export type RolesCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = RolesCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CatalogosCountOutputTypeDefaultArgs instead
     */
    export type CatalogosCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CatalogosCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CategoriasCountOutputTypeDefaultArgs instead
     */
    export type CategoriasCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CategoriasCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AdminCountOutputTypeDefaultArgs instead
     */
    export type AdminCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AdminCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UsuarioDefaultArgs instead
     */
    export type UsuarioArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UsuarioDefaultArgs<ExtArgs>
    /**
     * @deprecated Use RolesDefaultArgs instead
     */
    export type RolesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = RolesDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CatalogosDefaultArgs instead
     */
    export type CatalogosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CatalogosDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CategoriasDefaultArgs instead
     */
    export type CategoriasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CategoriasDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AdminDefaultArgs instead
     */
    export type AdminArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AdminDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ProductosDefaultArgs instead
     */
    export type ProductosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ProductosDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}